{"ast":null,"code":"/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"Matter\", [], factory);else if (typeof exports === 'object') exports[\"Matter\"] = factory();else root[\"Matter\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 21);\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ([\n    /* 0 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Common` module contains utility functions that are common to all modules.\n      *\n      * @class Common\n      */\n      var Common = {};\n      module.exports = Common;\n\n      (function () {\n        Common._nextId = 0;\n        Common._seed = 0;\n        Common._nowStartTime = +new Date();\n        Common._warnedOnce = {};\n        Common._decomp = null;\n        /**\n         * Extends the object in the first argument using the object in the second argument.\n         * @method extend\n         * @param {} obj\n         * @param {boolean} deep\n         * @return {} obj extended\n         */\n\n        Common.extend = function (obj, deep) {\n          var argsStart, args, deepClone;\n\n          if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n          } else {\n            argsStart = 1;\n            deepClone = true;\n          }\n\n          for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n              for (var prop in source) {\n                if (deepClone && source[prop] && source[prop].constructor === Object) {\n                  if (!obj[prop] || obj[prop].constructor === Object) {\n                    obj[prop] = obj[prop] || {};\n                    Common.extend(obj[prop], deepClone, source[prop]);\n                  } else {\n                    obj[prop] = source[prop];\n                  }\n                } else {\n                  obj[prop] = source[prop];\n                }\n              }\n            }\n          }\n\n          return obj;\n        };\n        /**\n         * Creates a new clone of the object, if deep is true references will also be cloned.\n         * @method clone\n         * @param {} obj\n         * @param {bool} deep\n         * @return {} obj cloned\n         */\n\n\n        Common.clone = function (obj, deep) {\n          return Common.extend({}, deep, obj);\n        };\n        /**\n         * Returns the list of keys for the given object.\n         * @method keys\n         * @param {} obj\n         * @return {string[]} keys\n         */\n\n\n        Common.keys = function (obj) {\n          if (Object.keys) return Object.keys(obj); // avoid hasOwnProperty for performance\n\n          var keys = [];\n\n          for (var key in obj) keys.push(key);\n\n          return keys;\n        };\n        /**\n         * Returns the list of values for the given object.\n         * @method values\n         * @param {} obj\n         * @return {array} Array of the objects property values\n         */\n\n\n        Common.values = function (obj) {\n          var values = [];\n\n          if (Object.keys) {\n            var keys = Object.keys(obj);\n\n            for (var i = 0; i < keys.length; i++) {\n              values.push(obj[keys[i]]);\n            }\n\n            return values;\n          } // avoid hasOwnProperty for performance\n\n\n          for (var key in obj) values.push(obj[key]);\n\n          return values;\n        };\n        /**\n         * Gets a value from `base` relative to the `path` string.\n         * @method get\n         * @param {} obj The base object\n         * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n         * @param {number} [begin] Path slice begin\n         * @param {number} [end] Path slice end\n         * @return {} The object at the given path\n         */\n\n\n        Common.get = function (obj, path, begin, end) {\n          path = path.split('.').slice(begin, end);\n\n          for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n          }\n\n          return obj;\n        };\n        /**\n         * Sets a value on `base` relative to the given `path` string.\n         * @method set\n         * @param {} obj The base object\n         * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n         * @param {} val The value to set\n         * @param {number} [begin] Path slice begin\n         * @param {number} [end] Path slice end\n         * @return {} Pass through `val` for chaining\n         */\n\n\n        Common.set = function (obj, path, val, begin, end) {\n          var parts = path.split('.').slice(begin, end);\n          Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n          return val;\n        };\n        /**\n         * Shuffles the given array in-place.\n         * The function uses a seeded random generator.\n         * @method shuffle\n         * @param {array} array\n         * @return {array} array shuffled randomly\n         */\n\n\n        Common.shuffle = function (array) {\n          for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n          }\n\n          return array;\n        };\n        /**\n         * Randomly chooses a value from a list with equal probability.\n         * The function uses a seeded random generator.\n         * @method choose\n         * @param {array} choices\n         * @return {object} A random choice object from the array\n         */\n\n\n        Common.choose = function (choices) {\n          return choices[Math.floor(Common.random() * choices.length)];\n        };\n        /**\n         * Returns true if the object is a HTMLElement, otherwise false.\n         * @method isElement\n         * @param {object} obj\n         * @return {boolean} True if the object is a HTMLElement, otherwise false\n         */\n\n\n        Common.isElement = function (obj) {\n          if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n          }\n\n          return !!(obj && obj.nodeType && obj.nodeName);\n        };\n        /**\n         * Returns true if the object is an array.\n         * @method isArray\n         * @param {object} obj\n         * @return {boolean} True if the object is an array, otherwise false\n         */\n\n\n        Common.isArray = function (obj) {\n          return Object.prototype.toString.call(obj) === '[object Array]';\n        };\n        /**\n         * Returns true if the object is a function.\n         * @method isFunction\n         * @param {object} obj\n         * @return {boolean} True if the object is a function, otherwise false\n         */\n\n\n        Common.isFunction = function (obj) {\n          return typeof obj === \"function\";\n        };\n        /**\n         * Returns true if the object is a plain object.\n         * @method isPlainObject\n         * @param {object} obj\n         * @return {boolean} True if the object is a plain object, otherwise false\n         */\n\n\n        Common.isPlainObject = function (obj) {\n          return typeof obj === 'object' && obj.constructor === Object;\n        };\n        /**\n         * Returns true if the object is a string.\n         * @method isString\n         * @param {object} obj\n         * @return {boolean} True if the object is a string, otherwise false\n         */\n\n\n        Common.isString = function (obj) {\n          return toString.call(obj) === '[object String]';\n        };\n        /**\n         * Returns the given value clamped between a minimum and maximum value.\n         * @method clamp\n         * @param {number} value\n         * @param {number} min\n         * @param {number} max\n         * @return {number} The value clamped between min and max inclusive\n         */\n\n\n        Common.clamp = function (value, min, max) {\n          if (value < min) return min;\n          if (value > max) return max;\n          return value;\n        };\n        /**\n         * Returns the sign of the given value.\n         * @method sign\n         * @param {number} value\n         * @return {number} -1 if negative, +1 if 0 or positive\n         */\n\n\n        Common.sign = function (value) {\n          return value < 0 ? -1 : 1;\n        };\n        /**\n         * Returns the current timestamp since the time origin (e.g. from page load).\n         * The result is in milliseconds and will use high-resolution timing if available.\n         * @method now\n         * @return {number} the current timestamp in milliseconds\n         */\n\n\n        Common.now = function () {\n          if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n              return window.performance.now();\n            } else if (window.performance.webkitNow) {\n              return window.performance.webkitNow();\n            }\n          }\n\n          if (Date.now) {\n            return Date.now();\n          }\n\n          return new Date() - Common._nowStartTime;\n        };\n        /**\n         * Returns a random value between a minimum and a maximum value inclusive.\n         * The function uses a seeded random generator.\n         * @method random\n         * @param {number} min\n         * @param {number} max\n         * @return {number} A random number between min and max inclusive\n         */\n\n\n        Common.random = function (min, max) {\n          min = typeof min !== \"undefined\" ? min : 0;\n          max = typeof max !== \"undefined\" ? max : 1;\n          return min + _seededRandom() * (max - min);\n        };\n\n        var _seededRandom = function () {\n          // https://en.wikipedia.org/wiki/Linear_congruential_generator\n          Common._seed = (Common._seed * 9301 + 49297) % 233280;\n          return Common._seed / 233280;\n        };\n        /**\n         * Converts a CSS hex colour string into an integer.\n         * @method colorToNumber\n         * @param {string} colorString\n         * @return {number} An integer representing the CSS hex string\n         */\n\n\n        Common.colorToNumber = function (colorString) {\n          colorString = colorString.replace('#', '');\n\n          if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n          }\n\n          return parseInt(colorString, 16);\n        };\n        /**\n         * The console logging level to use, where each level includes all levels above and excludes the levels below.\n         * The default level is 'debug' which shows all console messages.  \n         *\n         * Possible level values are:\n         * - 0 = None\n         * - 1 = Debug\n         * - 2 = Info\n         * - 3 = Warn\n         * - 4 = Error\n         * @property Common.logLevel\n         * @type {Number}\n         * @default 1\n         */\n\n\n        Common.logLevel = 1;\n        /**\n         * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method log\n         * @param ...objs {} The objects to log.\n         */\n\n        Common.log = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method info\n         * @param ...objs {} The objects to log.\n         */\n\n\n        Common.info = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method warn\n         * @param ...objs {} The objects to log.\n         */\n\n\n        Common.warn = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Uses `Common.warn` to log the given message one time only.\n         * @method warnOnce\n         * @param ...objs {} The objects to log.\n         */\n\n\n        Common.warnOnce = function () {\n          var message = Array.prototype.slice.call(arguments).join(' ');\n\n          if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n          }\n        };\n        /**\n         * Shows a deprecated console warning when the function on the given object is called.\n         * The target function will be replaced with a new function that first shows the warning\n         * and then calls the original function.\n         * @method deprecated\n         * @param {object} obj The object or module\n         * @param {string} name The property name of the function on obj\n         * @param {string} warning The one-time message to show if the function is called\n         */\n\n\n        Common.deprecated = function (obj, prop, warning) {\n          obj[prop] = Common.chain(function () {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n          }, obj[prop]);\n        };\n        /**\n         * Returns the next unique sequential ID.\n         * @method nextId\n         * @return {Number} Unique sequential ID\n         */\n\n\n        Common.nextId = function () {\n          return Common._nextId++;\n        };\n        /**\n         * A cross browser compatible indexOf implementation.\n         * @method indexOf\n         * @param {array} haystack\n         * @param {object} needle\n         * @return {number} The position of needle in haystack, otherwise -1.\n         */\n\n\n        Common.indexOf = function (haystack, needle) {\n          if (haystack.indexOf) return haystack.indexOf(needle);\n\n          for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle) return i;\n          }\n\n          return -1;\n        };\n        /**\n         * A cross browser compatible array map implementation.\n         * @method map\n         * @param {array} list\n         * @param {function} func\n         * @return {array} Values from list transformed by func.\n         */\n\n\n        Common.map = function (list, func) {\n          if (list.map) {\n            return list.map(func);\n          }\n\n          var mapped = [];\n\n          for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n          }\n\n          return mapped;\n        };\n        /**\n         * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n         * Circular dependencies are allowed.\n         * @method topologicalSort\n         * @param {object} graph\n         * @return {array} Partially ordered set of vertices in topological order.\n         */\n\n\n        Common.topologicalSort = function (graph) {\n          // https://github.com/mgechev/javascript-algorithms\n          // Copyright (c) Minko Gechev (MIT license)\n          // Modifications: tidy formatting and naming\n          var result = [],\n              visited = [],\n              temp = [];\n\n          for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n              Common._topologicalSort(node, visited, temp, graph, result);\n            }\n          }\n\n          return result;\n        };\n\n        Common._topologicalSort = function (node, visited, temp, graph, result) {\n          var neighbors = graph[node] || [];\n          temp[node] = true;\n\n          for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n              // skip circular dependencies\n              continue;\n            }\n\n            if (!visited[neighbor]) {\n              Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n          }\n\n          temp[node] = false;\n          visited[node] = true;\n          result.push(node);\n        };\n        /**\n         * Takes _n_ functions as arguments and returns a new function that calls them in order.\n         * The arguments applied when calling the new function will also be applied to every function passed.\n         * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n         * Therefore if a passed function does not return a value, the previously returned value is maintained.\n         * After all passed functions have been called the new function returns the last returned value (if any).\n         * If any of the passed functions are a chain, then the chain will be flattened.\n         * @method chain\n         * @param ...funcs {function} The functions to chain.\n         * @return {function} A new function that calls the passed functions in order.\n         */\n\n\n        Common.chain = function () {\n          var funcs = [];\n\n          for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n              // flatten already chained functions\n              funcs.push.apply(funcs, func._chained);\n            } else {\n              funcs.push(func);\n            }\n          }\n\n          var chain = function () {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n              args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n              var result = funcs[i].apply(lastResult, args);\n\n              if (typeof result !== 'undefined') {\n                lastResult = result;\n              }\n            }\n\n            return lastResult;\n          };\n\n          chain._chained = funcs;\n          return chain;\n        };\n        /**\n         * Chains a function to excute before the original function on the given `path` relative to `base`.\n         * See also docs for `Common.chain`.\n         * @method chainPathBefore\n         * @param {} base The base object\n         * @param {string} path The path relative to `base`\n         * @param {function} func The function to chain before the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Common.chainPathBefore = function (base, path, func) {\n          return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n        };\n        /**\n         * Chains a function to excute after the original function on the given `path` relative to `base`.\n         * See also docs for `Common.chain`.\n         * @method chainPathAfter\n         * @param {} base The base object\n         * @param {string} path The path relative to `base`\n         * @param {function} func The function to chain after the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Common.chainPathAfter = function (base, path, func) {\n          return Common.set(base, path, Common.chain(Common.get(base, path), func));\n        };\n        /**\n         * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n         * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n         * @method setDecomp\n         * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n         */\n\n\n        Common.setDecomp = function (decomp) {\n          Common._decomp = decomp;\n        };\n        /**\n         * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n         * otherwise returns the global `decomp` if set.\n         * @method getDecomp\n         * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n         */\n\n\n        Common.getDecomp = function () {\n          // get user provided decomp if set\n          var decomp = Common._decomp;\n\n          try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n              decomp = window.decomp;\n            } // otherwise from node global\n\n\n            if (!decomp && typeof global !== 'undefined') {\n              decomp = global.decomp;\n            }\n          } catch (e) {\n            // decomp not available\n            decomp = null;\n          }\n\n          return decomp;\n        };\n      })();\n      /***/\n\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n      *\n      * @class Bounds\n      */\n      var Bounds = {};\n      module.exports = Bounds;\n\n      (function () {\n        /**\n         * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n         * @method create\n         * @param {vertices} vertices\n         * @return {bounds} A new bounds object\n         */\n        Bounds.create = function (vertices) {\n          var bounds = {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: 0,\n              y: 0\n            }\n          };\n          if (vertices) Bounds.update(bounds, vertices);\n          return bounds;\n        };\n        /**\n         * Updates bounds using the given vertices and extends the bounds given a velocity.\n         * @method update\n         * @param {bounds} bounds\n         * @param {vertices} vertices\n         * @param {vector} velocity\n         */\n\n\n        Bounds.update = function (bounds, vertices, velocity) {\n          bounds.min.x = Infinity;\n          bounds.max.x = -Infinity;\n          bounds.min.y = Infinity;\n          bounds.max.y = -Infinity;\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n          }\n\n          if (velocity) {\n            if (velocity.x > 0) {\n              bounds.max.x += velocity.x;\n            } else {\n              bounds.min.x += velocity.x;\n            }\n\n            if (velocity.y > 0) {\n              bounds.max.y += velocity.y;\n            } else {\n              bounds.min.y += velocity.y;\n            }\n          }\n        };\n        /**\n         * Returns true if the bounds contains the given point.\n         * @method contains\n         * @param {bounds} bounds\n         * @param {vector} point\n         * @return {boolean} True if the bounds contain the point, otherwise false\n         */\n\n\n        Bounds.contains = function (bounds, point) {\n          return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n        };\n        /**\n         * Returns true if the two bounds intersect.\n         * @method overlaps\n         * @param {bounds} boundsA\n         * @param {bounds} boundsB\n         * @return {boolean} True if the bounds overlap, otherwise false\n         */\n\n\n        Bounds.overlaps = function (boundsA, boundsB) {\n          return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n        };\n        /**\n         * Translates the bounds by the given vector.\n         * @method translate\n         * @param {bounds} bounds\n         * @param {vector} vector\n         */\n\n\n        Bounds.translate = function (bounds, vector) {\n          bounds.min.x += vector.x;\n          bounds.max.x += vector.x;\n          bounds.min.y += vector.y;\n          bounds.max.y += vector.y;\n        };\n        /**\n         * Shifts the bounds to the given position.\n         * @method shift\n         * @param {bounds} bounds\n         * @param {vector} position\n         */\n\n\n        Bounds.shift = function (bounds, position) {\n          var deltaX = bounds.max.x - bounds.min.x,\n              deltaY = bounds.max.y - bounds.min.y;\n          bounds.min.x = position.x;\n          bounds.max.x = position.x + deltaX;\n          bounds.min.y = position.y;\n          bounds.max.y = position.y + deltaY;\n        };\n      })();\n      /***/\n\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n      * Vectors are the basis of all the geometry related operations in the engine.\n      * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vector\n      */\n      // TODO: consider params for reusing vector objects\n      var Vector = {};\n      module.exports = Vector;\n\n      (function () {\n        /**\n         * Creates a new vector.\n         * @method create\n         * @param {number} x\n         * @param {number} y\n         * @return {vector} A new vector\n         */\n        Vector.create = function (x, y) {\n          return {\n            x: x || 0,\n            y: y || 0\n          };\n        };\n        /**\n         * Returns a new vector with `x` and `y` copied from the given `vector`.\n         * @method clone\n         * @param {vector} vector\n         * @return {vector} A new cloned vector\n         */\n\n\n        Vector.clone = function (vector) {\n          return {\n            x: vector.x,\n            y: vector.y\n          };\n        };\n        /**\n         * Returns the magnitude (length) of a vector.\n         * @method magnitude\n         * @param {vector} vector\n         * @return {number} The magnitude of the vector\n         */\n\n\n        Vector.magnitude = function (vector) {\n          return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        };\n        /**\n         * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n         * @method magnitudeSquared\n         * @param {vector} vector\n         * @return {number} The squared magnitude of the vector\n         */\n\n\n        Vector.magnitudeSquared = function (vector) {\n          return vector.x * vector.x + vector.y * vector.y;\n        };\n        /**\n         * Rotates the vector about (0, 0) by specified angle.\n         * @method rotate\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} [output]\n         * @return {vector} The vector rotated about (0, 0)\n         */\n\n\n        Vector.rotate = function (vector, angle, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = vector.x * cos - vector.y * sin;\n          output.y = vector.x * sin + vector.y * cos;\n          output.x = x;\n          return output;\n        };\n        /**\n         * Rotates the vector about a specified point by specified angle.\n         * @method rotateAbout\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} point\n         * @param {vector} [output]\n         * @return {vector} A new vector rotated about the point\n         */\n\n\n        Vector.rotateAbout = function (vector, angle, point, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n          output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n          output.x = x;\n          return output;\n        };\n        /**\n         * Normalises a vector (such that its magnitude is `1`).\n         * @method normalise\n         * @param {vector} vector\n         * @return {vector} A new vector normalised\n         */\n\n\n        Vector.normalise = function (vector) {\n          var magnitude = Vector.magnitude(vector);\n          if (magnitude === 0) return {\n            x: 0,\n            y: 0\n          };\n          return {\n            x: vector.x / magnitude,\n            y: vector.y / magnitude\n          };\n        };\n        /**\n         * Returns the dot-product of two vectors.\n         * @method dot\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The dot product of the two vectors\n         */\n\n\n        Vector.dot = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n        };\n        /**\n         * Returns the cross-product of two vectors.\n         * @method cross\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The cross product of the two vectors\n         */\n\n\n        Vector.cross = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n        };\n        /**\n         * Returns the cross-product of three vectors.\n         * @method cross3\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} vectorC\n         * @return {number} The cross product of the three vectors\n         */\n\n\n        Vector.cross3 = function (vectorA, vectorB, vectorC) {\n          return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n        };\n        /**\n         * Adds the two vectors.\n         * @method add\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB added\n         */\n\n\n        Vector.add = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x + vectorB.x;\n          output.y = vectorA.y + vectorB.y;\n          return output;\n        };\n        /**\n         * Subtracts the two vectors.\n         * @method sub\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB subtracted\n         */\n\n\n        Vector.sub = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x - vectorB.x;\n          output.y = vectorA.y - vectorB.y;\n          return output;\n        };\n        /**\n         * Multiplies a vector and a scalar.\n         * @method mult\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector multiplied by scalar\n         */\n\n\n        Vector.mult = function (vector, scalar) {\n          return {\n            x: vector.x * scalar,\n            y: vector.y * scalar\n          };\n        };\n        /**\n         * Divides a vector and a scalar.\n         * @method div\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector divided by scalar\n         */\n\n\n        Vector.div = function (vector, scalar) {\n          return {\n            x: vector.x / scalar,\n            y: vector.y / scalar\n          };\n        };\n        /**\n         * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n         * @method perp\n         * @param {vector} vector\n         * @param {bool} [negate=false]\n         * @return {vector} The perpendicular vector\n         */\n\n\n        Vector.perp = function (vector, negate) {\n          negate = negate === true ? -1 : 1;\n          return {\n            x: negate * -vector.y,\n            y: negate * vector.x\n          };\n        };\n        /**\n         * Negates both components of a vector such that it points in the opposite direction.\n         * @method neg\n         * @param {vector} vector\n         * @return {vector} The negated vector\n         */\n\n\n        Vector.neg = function (vector) {\n          return {\n            x: -vector.x,\n            y: -vector.y\n          };\n        };\n        /**\n         * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n         * @method angle\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The angle in radians\n         */\n\n\n        Vector.angle = function (vectorA, vectorB) {\n          return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n        };\n        /**\n         * Temporary vector pool (not thread-safe).\n         * @property _temp\n         * @type {vector[]}\n         * @private\n         */\n\n\n        Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n      })();\n      /***/\n\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n      * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n      * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vertices\n      */\n      var Vertices = {};\n      module.exports = Vertices;\n\n      var Vector = __webpack_require__(2);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new set of `Matter.Body` compatible vertices.\n         * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n         * but with some additional references required for efficient collision detection routines.\n         *\n         * Vertices must be specified in clockwise order.\n         *\n         * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n         *\n         * @method create\n         * @param {vector[]} points\n         * @param {body} body\n         */\n        Vertices.create = function (points, body) {\n          var vertices = [];\n\n          for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n              x: point.x,\n              y: point.y,\n              index: i,\n              body: body,\n              isInternal: false\n            };\n            vertices.push(vertex);\n          }\n\n          return vertices;\n        };\n        /**\n         * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n         * into a `Matter.Vertices` object for the given `Matter.Body`.\n         * For parsing SVG paths, see `Svg.pathToVertices`.\n         * @method fromPath\n         * @param {string} path\n         * @param {body} body\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.fromPath = function (path, body) {\n          var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n              points = [];\n          path.replace(pathPattern, function (match, x, y) {\n            points.push({\n              x: parseFloat(x),\n              y: parseFloat(y)\n            });\n          });\n          return Vertices.create(points, body);\n        };\n        /**\n         * Returns the centre (centroid) of the set of vertices.\n         * @method centre\n         * @param {vertices} vertices\n         * @return {vector} The centre point\n         */\n\n\n        Vertices.centre = function (vertices) {\n          var area = Vertices.area(vertices, true),\n              centre = {\n            x: 0,\n            y: 0\n          },\n              cross,\n              temp,\n              j;\n\n          for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n          }\n\n          return Vector.div(centre, 6 * area);\n        };\n        /**\n         * Returns the average (mean) of the set of vertices.\n         * @method mean\n         * @param {vertices} vertices\n         * @return {vector} The average point\n         */\n\n\n        Vertices.mean = function (vertices) {\n          var average = {\n            x: 0,\n            y: 0\n          };\n\n          for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n          }\n\n          return Vector.div(average, vertices.length);\n        };\n        /**\n         * Returns the area of the set of vertices.\n         * @method area\n         * @param {vertices} vertices\n         * @param {bool} signed\n         * @return {number} The area\n         */\n\n\n        Vertices.area = function (vertices, signed) {\n          var area = 0,\n              j = vertices.length - 1;\n\n          for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n          }\n\n          if (signed) return area / 2;\n          return Math.abs(area) / 2;\n        };\n        /**\n         * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n         * @method inertia\n         * @param {vertices} vertices\n         * @param {number} mass\n         * @return {number} The polygon's moment of inertia\n         */\n\n\n        Vertices.inertia = function (vertices, mass) {\n          var numerator = 0,\n              denominator = 0,\n              v = vertices,\n              cross,\n              j; // find the polygon's moment of inertia, using second moment of area\n          // from equations at http://www.physicsforums.com/showthread.php?t=25293\n\n          for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n          }\n\n          return mass / 6 * (numerator / denominator);\n        };\n        /**\n         * Translates the set of vertices in-place.\n         * @method translate\n         * @param {vertices} vertices\n         * @param {vector} vector\n         * @param {number} scalar\n         */\n\n\n        Vertices.translate = function (vertices, vector, scalar) {\n          scalar = typeof scalar !== 'undefined' ? scalar : 1;\n          var verticesLength = vertices.length,\n              translateX = vector.x * scalar,\n              translateY = vector.y * scalar,\n              i;\n\n          for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n          }\n\n          return vertices;\n        };\n        /**\n         * Rotates the set of vertices in-place.\n         * @method rotate\n         * @param {vertices} vertices\n         * @param {number} angle\n         * @param {vector} point\n         */\n\n\n        Vertices.rotate = function (vertices, angle, point) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle),\n              pointX = point.x,\n              pointY = point.y,\n              verticesLength = vertices.length,\n              vertex,\n              dx,\n              dy,\n              i;\n\n          for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n          }\n\n          return vertices;\n        };\n        /**\n         * Returns `true` if the `point` is inside the set of `vertices`.\n         * @method contains\n         * @param {vertices} vertices\n         * @param {vector} point\n         * @return {boolean} True if the vertices contains point, otherwise false\n         */\n\n\n        Vertices.contains = function (vertices, point) {\n          var pointX = point.x,\n              pointY = point.y,\n              verticesLength = vertices.length,\n              vertex = vertices[verticesLength - 1],\n              nextVertex;\n\n          for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n              return false;\n            }\n\n            vertex = nextVertex;\n          }\n\n          return true;\n        };\n        /**\n         * Scales the vertices from a point (default is centre) in-place.\n         * @method scale\n         * @param {vertices} vertices\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         */\n\n\n        Vertices.scale = function (vertices, scaleX, scaleY, point) {\n          if (scaleX === 1 && scaleY === 1) return vertices;\n          point = point || Vertices.centre(vertices);\n          var vertex, delta;\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n          }\n\n          return vertices;\n        };\n        /**\n         * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n         * The radius parameter is a single number or an array to specify the radius for each vertex.\n         * @method chamfer\n         * @param {vertices} vertices\n         * @param {number[]} radius\n         * @param {number} quality\n         * @param {number} qualityMin\n         * @param {number} qualityMax\n         */\n\n\n        Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n          if (typeof radius === 'number') {\n            radius = [radius];\n          } else {\n            radius = radius || [8];\n          } // quality defaults to -1, which is auto\n\n\n          quality = typeof quality !== 'undefined' ? quality : -1;\n          qualityMin = qualityMin || 2;\n          qualityMax = qualityMax || 14;\n          var newVertices = [];\n\n          for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n              newVertices.push(vertex);\n              continue;\n            }\n\n            var prevNormal = Vector.normalise({\n              x: vertex.y - prevVertex.y,\n              y: prevVertex.x - vertex.x\n            });\n            var nextNormal = Vector.normalise({\n              x: nextVertex.y - vertex.y,\n              y: vertex.x - nextVertex.x\n            });\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n            var precision = quality;\n\n            if (quality === -1) {\n              // automatically decide precision\n              precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax); // use an even value for precision, more likely to reduce axes by using symmetry\n\n            if (precision % 2 === 1) precision += 1;\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n              newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n          }\n\n          return newVertices;\n        };\n        /**\n         * Sorts the input vertices into clockwise order in place.\n         * @method clockwiseSort\n         * @param {vertices} vertices\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.clockwiseSort = function (vertices) {\n          var centre = Vertices.mean(vertices);\n          vertices.sort(function (vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n          });\n          return vertices;\n        };\n        /**\n         * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n         * @method isConvex\n         * @param {vertices} vertices\n         * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n         */\n\n\n        Vertices.isConvex = function (vertices) {\n          // http://paulbourke.net/geometry/polygonmesh/\n          // Copyright (c) Paul Bourke (use permitted)\n          var flag = 0,\n              n = vertices.length,\n              i,\n              j,\n              k,\n              z;\n          if (n < 3) return null;\n\n          for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n              flag |= 1;\n            } else if (z > 0) {\n              flag |= 2;\n            }\n\n            if (flag === 3) {\n              return false;\n            }\n          }\n\n          if (flag !== 0) {\n            return true;\n          } else {\n            return null;\n          }\n        };\n        /**\n         * Returns the convex hull of the input vertices as a new array of points.\n         * @method hull\n         * @param {vertices} vertices\n         * @return [vertex] vertices\n         */\n\n\n        Vertices.hull = function (vertices) {\n          // http://geomalgorithms.com/a10-_hull-1.html\n          var upper = [],\n              lower = [],\n              vertex,\n              i; // sort vertices on x-axis (y-axis for ties)\n\n          vertices = vertices.slice(0);\n          vertices.sort(function (vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n          }); // build lower hull\n\n          for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n              lower.pop();\n            }\n\n            lower.push(vertex);\n          } // build upper hull\n\n\n          for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n              upper.pop();\n            }\n\n            upper.push(vertex);\n          } // concatenation of the lower and upper hulls gives the convex hull\n          // omit last points because they are repeated at the beginning of the other list\n\n\n          upper.pop();\n          lower.pop();\n          return upper.concat(lower);\n        };\n      })();\n      /***/\n\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Events\n      */\n      var Events = {};\n      module.exports = Events;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Subscribes a callback function to the given object's `eventName`.\n         * @method on\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n        Events.on = function (object, eventNames, callback) {\n          var names = eventNames.split(' '),\n              name;\n\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n          }\n\n          return callback;\n        };\n        /**\n         * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n         * @method off\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n\n\n        Events.off = function (object, eventNames, callback) {\n          if (!eventNames) {\n            object.events = {};\n            return;\n          } // handle Events.off(object, callback)\n\n\n          if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n          }\n\n          var names = eventNames.split(' ');\n\n          for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n              for (var j = 0; j < callbacks.length; j++) {\n                if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n              }\n            }\n\n            object.events[names[i]] = newCallbacks;\n          }\n        };\n        /**\n         * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n         * @method trigger\n         * @param {} object\n         * @param {string} eventNames\n         * @param {} event\n         */\n\n\n        Events.trigger = function (object, eventNames, event) {\n          var names, name, callbacks, eventClone;\n          var events = object.events;\n\n          if (events && Common.keys(events).length > 0) {\n            if (!event) event = {};\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n              name = names[i];\n              callbacks = events[name];\n\n              if (callbacks) {\n                eventClone = Common.clone(event, false);\n                eventClone.name = name;\n                eventClone.source = object;\n\n                for (var j = 0; j < callbacks.length; j++) {\n                  callbacks[j].apply(object, [eventClone]);\n                }\n              }\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n      *\n      * They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n      * A composite could contain anything from a single body all the way up to a whole world.\n      * \n      * When making any changes to composites, use the included functions rather than changing their properties directly.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composite\n      */\n      var Composite = {};\n      module.exports = Composite;\n\n      var Events = __webpack_require__(4);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      var Body = __webpack_require__(6);\n\n      (function () {\n        /**\n         * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properites section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} [options]\n         * @return {composite} A new composite\n         */\n        Composite.create = function (options) {\n          return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n              allBodies: null,\n              allConstraints: null,\n              allComposites: null\n            }\n          }, options);\n        };\n        /**\n         * Sets the composite's `isModified` flag. \n         * If `updateParents` is true, all parents will be set (default: false).\n         * If `updateChildren` is true, all children will be set (default: false).\n         * @private\n         * @method setModified\n         * @param {composite} composite\n         * @param {boolean} isModified\n         * @param {boolean} [updateParents=false]\n         * @param {boolean} [updateChildren=false]\n         */\n\n\n        Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n          composite.isModified = isModified;\n\n          if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n          }\n\n          if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n          }\n\n          if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              var childComposite = composite.composites[i];\n              Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n          }\n        };\n        /**\n         * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n         * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n         * @method add\n         * @param {composite} composite\n         * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n         * @return {composite} The original composite with the objects added\n         */\n\n\n        Composite.add = function (composite, object) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeAdd', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                  Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                  break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n\n              case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n\n              case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n\n              case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterAdd', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Optionally searching its children recursively.\n         * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n         * @method remove\n         * @param {composite} composite\n         * @param {object|array} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the objects removed\n         */\n\n\n        Composite.remove = function (composite, object, deep) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeRemove', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n\n              case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n\n              case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n\n              case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterRemove', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Adds a composite to the given composite.\n         * @private\n         * @method addComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @return {composite} The original compositeA with the objects from compositeB added\n         */\n\n\n        Composite.addComposite = function (compositeA, compositeB) {\n          compositeA.composites.push(compositeB);\n          compositeB.parent = compositeA;\n          Composite.setModified(compositeA, true, true, false);\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @param {boolean} [deep=false]\n         * @return {composite} The original compositeA with the composite removed\n         */\n\n\n        Composite.removeComposite = function (compositeA, compositeB, deep) {\n          var position = Common.indexOf(compositeA.composites, compositeB);\n\n          if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++) {\n              Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n          }\n\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite.\n         * @private\n         * @method removeCompositeAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the composite removed\n         */\n\n\n        Composite.removeCompositeAt = function (composite, position) {\n          composite.composites.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a body to the given composite.\n         * @private\n         * @method addBody\n         * @param {composite} composite\n         * @param {body} body\n         * @return {composite} The original composite with the body added\n         */\n\n\n        Composite.addBody = function (composite, body) {\n          composite.bodies.push(body);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeBody\n         * @param {composite} composite\n         * @param {body} body\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBody = function (composite, body, deep) {\n          var position = Common.indexOf(composite.bodies, body);\n\n          if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeBody(composite.composites[i], body, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeBodyAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBodyAt = function (composite, position) {\n          composite.bodies.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a constraint to the given composite.\n         * @private\n         * @method addConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @return {composite} The original composite with the constraint added\n         */\n\n\n        Composite.addConstraint = function (composite, constraint) {\n          composite.constraints.push(constraint);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a constraint from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraint = function (composite, constraint, deep) {\n          var position = Common.indexOf(composite.constraints, constraint);\n\n          if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeConstraintAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraintAt = function (composite, position) {\n          composite.constraints.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes all bodies, constraints and composites from the given composite.\n         * Optionally clearing its children recursively.\n         * @method clear\n         * @param {composite} composite\n         * @param {boolean} keepStatic\n         * @param {boolean} [deep=false]\n         */\n\n\n        Composite.clear = function (composite, keepStatic, deep) {\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.clear(composite.composites[i], keepStatic, true);\n            }\n          }\n\n          if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function (body) {\n              return body.isStatic;\n            });\n          } else {\n            composite.bodies.length = 0;\n          }\n\n          composite.constraints.length = 0;\n          composite.composites.length = 0;\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns all bodies in the given composite, including all bodies in its children, recursively.\n         * @method allBodies\n         * @param {composite} composite\n         * @return {body[]} All the bodies\n         */\n\n\n        Composite.allBodies = function (composite) {\n          if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n          }\n\n          var bodies = [].concat(composite.bodies);\n\n          for (var i = 0; i < composite.composites.length; i++) bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n          if (composite.cache) {\n            composite.cache.allBodies = bodies;\n          }\n\n          return bodies;\n        };\n        /**\n         * Returns all constraints in the given composite, including all constraints in its children, recursively.\n         * @method allConstraints\n         * @param {composite} composite\n         * @return {constraint[]} All the constraints\n         */\n\n\n        Composite.allConstraints = function (composite) {\n          if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n          }\n\n          var constraints = [].concat(composite.constraints);\n\n          for (var i = 0; i < composite.composites.length; i++) constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n          if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n          }\n\n          return constraints;\n        };\n        /**\n         * Returns all composites in the given composite, including all composites in its children, recursively.\n         * @method allComposites\n         * @param {composite} composite\n         * @return {composite[]} All the composites\n         */\n\n\n        Composite.allComposites = function (composite) {\n          if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n          }\n\n          var composites = [].concat(composite.composites);\n\n          for (var i = 0; i < composite.composites.length; i++) composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n          if (composite.cache) {\n            composite.cache.allComposites = composites;\n          }\n\n          return composites;\n        };\n        /**\n         * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n         * @method get\n         * @param {composite} composite\n         * @param {number} id\n         * @param {string} type\n         * @return {object} The requested object, if found\n         */\n\n\n        Composite.get = function (composite, id, type) {\n          var objects, object;\n\n          switch (type) {\n            case 'body':\n              objects = Composite.allBodies(composite);\n              break;\n\n            case 'constraint':\n              objects = Composite.allConstraints(composite);\n              break;\n\n            case 'composite':\n              objects = Composite.allComposites(composite).concat(composite);\n              break;\n          }\n\n          if (!objects) return null;\n          object = objects.filter(function (object) {\n            return object.id.toString() === id.toString();\n          });\n          return object.length === 0 ? null : object[0];\n        };\n        /**\n         * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n         * @method move\n         * @param {compositeA} compositeA\n         * @param {object[]} objects\n         * @param {compositeB} compositeB\n         * @return {composite} Returns compositeA\n         */\n\n\n        Composite.move = function (compositeA, objects, compositeB) {\n          Composite.remove(compositeA, objects);\n          Composite.add(compositeB, objects);\n          return compositeA;\n        };\n        /**\n         * Assigns new ids for all objects in the composite, recursively.\n         * @method rebase\n         * @param {composite} composite\n         * @return {composite} Returns composite\n         */\n\n\n        Composite.rebase = function (composite) {\n          var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n\n          for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n          }\n\n          return composite;\n        };\n        /**\n         * Translates all children in the composite by a given vector relative to their current positions, \n         * without imparting any velocity.\n         * @method translate\n         * @param {composite} composite\n         * @param {vector} translation\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.translate = function (composite, translation, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n          }\n\n          return composite;\n        };\n        /**\n         * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n         * @method rotate\n         * @param {composite} composite\n         * @param {number} rotation\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.rotate = function (composite, rotation, point, recursive) {\n          var cos = Math.cos(rotation),\n              sin = Math.sin(rotation),\n              bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.rotate(body, rotation);\n          }\n\n          return composite;\n        };\n        /**\n         * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n         * @method scale\n         * @param {composite} composite\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + dx * scaleX,\n              y: point.y + dy * scaleY\n            });\n            Body.scale(body, scaleX, scaleY);\n          }\n\n          return composite;\n        };\n        /**\n         * Returns the union of the bounds of all of the composite's bodies.\n         * @method bounds\n         * @param {composite} composite The composite.\n         * @returns {bounds} The composite bounds.\n         */\n\n\n        Composite.bounds = function (composite) {\n          var bodies = Composite.allBodies(composite),\n              vertices = [];\n\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n          }\n\n          return Bounds.create(vertices);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, before objects have been added.\n        *\n        * @event beforeAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, after objects have been added.\n        *\n        * @event afterAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, before objects have been removed.\n        *\n        * @event beforeRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, after objects have been removed.\n        *\n        * @event afterRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"composite\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage composites.\n         *\n         * @property label\n         * @type string\n         * @default \"Composite\"\n         */\n\n        /**\n         * A flag that specifies whether the composite has been modified during the current step.\n         * This is automatically managed when bodies, constraints or composites are added or removed.\n         *\n         * @property isModified\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n         *\n         * @property parent\n         * @type composite\n         * @default null\n         */\n\n        /**\n         * An array of `Body` that are _direct_ children of this composite.\n         * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n         *\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * An array of `Constraint` that are _direct_ children of this composite.\n         * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n         *\n         * @property constraints\n         * @type constraint[]\n         * @default []\n         */\n\n        /**\n         * An array of `Composite` that are _direct_ children of this composite.\n         * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n         *\n         * @property composites\n         * @type composite[]\n         * @default []\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * An object used for storing cached results for performance reasons.\n         * This is used internally only and is automatically managed.\n         *\n         * @private\n         * @property cache\n         * @type {}\n         */\n\n      })();\n      /***/\n\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Body` module contains methods for creating and manipulating body models.\n      * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n      * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      \n      * @class Body\n      */\n      var Body = {};\n      module.exports = Body;\n\n      var Vertices = __webpack_require__(3);\n\n      var Vector = __webpack_require__(2);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Render = __webpack_require__(16);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      var Axes = __webpack_require__(11);\n\n      (function () {\n        Body._inertiaScale = 4;\n        Body._nextCollidingGroupId = 1;\n        Body._nextNonCollidingGroupId = -1;\n        Body._nextCategory = 0x0001;\n        /**\n         * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * Vertices must be specified in clockwise order.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {body} body\n         */\n\n        Body.create = function (options) {\n          var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: {\n              x: 0,\n              y: 0\n            },\n            force: {\n              x: 0,\n              y: 0\n            },\n            torque: 0,\n            positionImpulse: {\n              x: 0,\n              y: 0\n            },\n            constraintImpulse: {\n              x: 0,\n              y: 0,\n              angle: 0\n            },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: {\n              x: 0,\n              y: 0\n            },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n              visible: true,\n              opacity: 1,\n              strokeStyle: null,\n              fillStyle: null,\n              lineWidth: null,\n              sprite: {\n                xScale: 1,\n                yScale: 1,\n                xOffset: 0,\n                yOffset: 0\n              }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n          };\n          var body = Common.extend(defaults, options);\n\n          _initProperties(body, options);\n\n          return body;\n        };\n        /**\n         * Returns the next unique group index for which bodies will collide.\n         * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n         * See `body.collisionFilter` for more information.\n         * @method nextGroup\n         * @param {bool} [isNonColliding=false]\n         * @return {Number} Unique group index\n         */\n\n\n        Body.nextGroup = function (isNonColliding) {\n          if (isNonColliding) return Body._nextNonCollidingGroupId--;\n          return Body._nextCollidingGroupId++;\n        };\n        /**\n         * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n         * There are 32 available. See `body.collisionFilter` for more information.\n         * @method nextCategory\n         * @return {Number} Unique category bitfield\n         */\n\n\n        Body.nextCategory = function () {\n          Body._nextCategory = Body._nextCategory << 1;\n          return Body._nextCategory;\n        };\n        /**\n         * Initialises body properties.\n         * @method _initProperties\n         * @private\n         * @param {body} body\n         * @param {} [options]\n         */\n\n\n        var _initProperties = function (body, options) {\n          options = options || {}; // init required properties (order is important)\n\n          Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n          });\n          Vertices.rotate(body.vertices, body.angle, body.position);\n          Axes.rotate(body.axes, body.angle);\n          Bounds.update(body.bounds, body.vertices, body.velocity); // allow options to override the automatically calculated properties\n\n          Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n          }); // render properties\n\n          var defaultFillStyle = body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1']),\n              defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n              defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n          body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n          body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n          body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n          body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n          body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n        };\n        /**\n         * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n         * Prefer to use the actual setter functions in performance critical situations.\n         * @method set\n         * @param {body} body\n         * @param {} settings A property name (or map of properties and values) to set on the body.\n         * @param {} value The value to set if `settings` is a single property name.\n         */\n\n\n        Body.set = function (body, settings, value) {\n          var property;\n\n          if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n          }\n\n          for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property)) continue;\n            value = settings[property];\n\n            switch (property) {\n              case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n\n              case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n\n              case 'mass':\n                Body.setMass(body, value);\n                break;\n\n              case 'density':\n                Body.setDensity(body, value);\n                break;\n\n              case 'inertia':\n                Body.setInertia(body, value);\n                break;\n\n              case 'vertices':\n                Body.setVertices(body, value);\n                break;\n\n              case 'position':\n                Body.setPosition(body, value);\n                break;\n\n              case 'angle':\n                Body.setAngle(body, value);\n                break;\n\n              case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n\n              case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n\n              case 'parts':\n                Body.setParts(body, value);\n                break;\n\n              case 'centre':\n                Body.setCentre(body, value);\n                break;\n\n              default:\n                body[property] = value;\n            }\n          }\n        };\n        /**\n         * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n         * @method setStatic\n         * @param {body} body\n         * @param {bool} isStatic\n         */\n\n\n        Body.setStatic = function (body, isStatic) {\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n              part.restitution = 0;\n              part.friction = 1;\n              part.mass = part.inertia = part.density = Infinity;\n              part.inverseMass = part.inverseInertia = 0;\n              part.positionPrev.x = part.position.x;\n              part.positionPrev.y = part.position.y;\n              part.anglePrev = part.angle;\n              part.angularVelocity = 0;\n              part.speed = 0;\n              part.angularSpeed = 0;\n              part.motion = 0;\n            } else if (part._original) {\n              part.restitution = part._original.restitution;\n              part.friction = part._original.friction;\n              part.mass = part._original.mass;\n              part.inertia = part._original.inertia;\n              part.density = part._original.density;\n              part.inverseMass = part._original.inverseMass;\n              part.inverseInertia = part._original.inverseInertia;\n              part._original = null;\n            }\n          }\n        };\n        /**\n         * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n         * @method setMass\n         * @param {body} body\n         * @param {number} mass\n         */\n\n\n        Body.setMass = function (body, mass) {\n          var moment = body.inertia / (body.mass / 6);\n          body.inertia = moment * (mass / 6);\n          body.inverseInertia = 1 / body.inertia;\n          body.mass = mass;\n          body.inverseMass = 1 / body.mass;\n          body.density = body.mass / body.area;\n        };\n        /**\n         * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n         * @method setDensity\n         * @param {body} body\n         * @param {number} density\n         */\n\n\n        Body.setDensity = function (body, density) {\n          Body.setMass(body, density * body.area);\n          body.density = density;\n        };\n        /**\n         * Sets the moment of inertia (i.e. second moment of area) of the body. \n         * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n         * @method setInertia\n         * @param {body} body\n         * @param {number} inertia\n         */\n\n\n        Body.setInertia = function (body, inertia) {\n          body.inertia = inertia;\n          body.inverseInertia = 1 / body.inertia;\n        };\n        /**\n         * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n         * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n         * They are then automatically translated to world space based on `body.position`.\n         *\n         * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n         * Vertices must form a convex hull, concave hulls are not supported.\n         *\n         * @method setVertices\n         * @param {body} body\n         * @param {vector[]} vertices\n         */\n\n\n        Body.setVertices = function (body, vertices) {\n          // change vertices\n          if (vertices[0].body === body) {\n            body.vertices = vertices;\n          } else {\n            body.vertices = Vertices.create(vertices, body);\n          } // update properties\n\n\n          body.axes = Axes.fromVertices(body.vertices);\n          body.area = Vertices.area(body.vertices);\n          Body.setMass(body, body.density * body.area); // orient vertices around the centre of mass at origin (0, 0)\n\n          var centre = Vertices.centre(body.vertices);\n          Vertices.translate(body.vertices, centre, -1); // update inertia while vertices are at origin (0, 0)\n\n          Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass)); // update geometry\n\n          Vertices.translate(body.vertices, body.position);\n          Bounds.update(body.bounds, body.vertices, body.velocity);\n        };\n        /**\n         * Sets the parts of the `body` and updates mass, inertia and centroid.\n         * Each part will have its parent set to `body`.\n         * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n         * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n         * @method setParts\n         * @param {body} body\n         * @param [body] parts\n         * @param {bool} [autoHull=true]\n         */\n\n\n        Body.setParts = function (body, parts, autoHull) {\n          var i; // add all the parts, ensuring that the first part is always the parent body\n\n          parts = parts.slice(0);\n          body.parts.length = 0;\n          body.parts.push(body);\n          body.parent = body;\n\n          for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n\n            if (part !== body) {\n              part.parent = body;\n              body.parts.push(part);\n            }\n          }\n\n          if (body.parts.length === 1) return;\n          autoHull = typeof autoHull !== 'undefined' ? autoHull : true; // find the convex hull of all parts to set on the parent body\n\n          if (autoHull) {\n            var vertices = [];\n\n            for (i = 0; i < parts.length; i++) {\n              vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n          } // sum the properties of all compound parts of the parent body\n\n\n          var total = Body._totalProperties(body);\n\n          body.area = total.area;\n          body.parent = body;\n          body.position.x = total.centre.x;\n          body.position.y = total.centre.y;\n          body.positionPrev.x = total.centre.x;\n          body.positionPrev.y = total.centre.y;\n          Body.setMass(body, total.mass);\n          Body.setInertia(body, total.inertia);\n          Body.setPosition(body, total.centre);\n        };\n        /**\n         * Set the centre of mass of the body. \n         * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n         * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n         * This is equal to moving `body.position` but not the `body.vertices`.\n         * Invalid if the `centre` falls outside the body's convex hull.\n         * @method setCentre\n         * @param {body} body\n         * @param {vector} centre\n         * @param {bool} relative\n         */\n\n\n        Body.setCentre = function (body, centre, relative) {\n          if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n          } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n          }\n        };\n        /**\n         * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n         * @method setPosition\n         * @param {body} body\n         * @param {vector} position\n         */\n\n\n        Body.setPosition = function (body, position) {\n          var delta = Vector.sub(position, body.position);\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n         * @method setAngle\n         * @param {body} body\n         * @param {number} angle\n         */\n\n\n        Body.setAngle = function (body, angle) {\n          var delta = angle - body.angle;\n          body.anglePrev += delta;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n\n            if (i > 0) {\n              Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n          }\n        };\n        /**\n         * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setVelocity\n         * @param {body} body\n         * @param {vector} velocity\n         */\n\n\n        Body.setVelocity = function (body, velocity) {\n          body.positionPrev.x = body.position.x - velocity.x;\n          body.positionPrev.y = body.position.y - velocity.y;\n          body.velocity.x = velocity.x;\n          body.velocity.y = velocity.y;\n          body.speed = Vector.magnitude(body.velocity);\n        };\n        /**\n         * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setAngularVelocity\n         * @param {body} body\n         * @param {number} velocity\n         */\n\n\n        Body.setAngularVelocity = function (body, velocity) {\n          body.anglePrev = body.angle - velocity;\n          body.angularVelocity = velocity;\n          body.angularSpeed = Math.abs(body.angularVelocity);\n        };\n        /**\n         * Moves a body by a given vector relative to its current position, without imparting any velocity.\n         * @method translate\n         * @param {body} body\n         * @param {vector} translation\n         */\n\n\n        Body.translate = function (body, translation) {\n          Body.setPosition(body, Vector.add(body.position, translation));\n        };\n        /**\n         * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n         * @method rotate\n         * @param {body} body\n         * @param {number} rotation\n         * @param {vector} [point]\n         */\n\n\n        Body.rotate = function (body, rotation, point) {\n          if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n          } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.setAngle(body, body.angle + rotation);\n          }\n        };\n        /**\n         * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n         * @method scale\n         * @param {body} body\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} [point]\n         */\n\n\n        Body.scale = function (body, scaleX, scaleY, point) {\n          var totalArea = 0,\n              totalInertia = 0;\n          point = point || body.position;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i]; // scale vertices\n\n            Vertices.scale(part.vertices, scaleX, scaleY, point); // update properties\n\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area); // update inertia (requires vertices to be at origin)\n\n            Vertices.translate(part.vertices, {\n              x: -part.position.x,\n              y: -part.position.y\n            });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, {\n              x: part.position.x,\n              y: part.position.y\n            });\n\n            if (i > 0) {\n              totalArea += part.area;\n              totalInertia += part.inertia;\n            } // scale position\n\n\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY; // update bounds\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          } // handle parent body\n\n\n          if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n              Body.setMass(body, body.density * totalArea);\n              Body.setInertia(body, totalInertia);\n            }\n          } // handle circles\n\n\n          if (body.circleRadius) {\n            if (scaleX === scaleY) {\n              body.circleRadius *= scaleX;\n            } else {\n              // body is no longer a circle\n              body.circleRadius = null;\n            }\n          }\n        };\n        /**\n         * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n         * @method update\n         * @param {body} body\n         * @param {number} deltaTime\n         * @param {number} timeScale\n         * @param {number} correction\n         */\n\n\n        Body.update = function (body, deltaTime, timeScale, correction) {\n          var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2); // from the previous step\n\n          var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n              velocityPrevX = body.position.x - body.positionPrev.x,\n              velocityPrevY = body.position.y - body.positionPrev.y; // update velocity with Verlet integration\n\n          body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;\n          body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.position.x += body.velocity.x;\n          body.position.y += body.velocity.y; // update angular velocity with Verlet integration\n\n          body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n          body.anglePrev = body.angle;\n          body.angle += body.angularVelocity; // track speed and acceleration\n\n          body.speed = Vector.magnitude(body.velocity);\n          body.angularSpeed = Math.abs(body.angularVelocity); // transform the body geometry\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            Vertices.translate(part.vertices, body.velocity);\n\n            if (i > 0) {\n              part.position.x += body.velocity.x;\n              part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n              Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n              Axes.rotate(part.axes, body.angularVelocity);\n\n              if (i > 0) {\n                Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n              }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Applies a force to a body from a given world-space position, including resulting torque.\n         * @method applyForce\n         * @param {body} body\n         * @param {vector} position\n         * @param {vector} force\n         */\n\n\n        Body.applyForce = function (body, position, force) {\n          body.force.x += force.x;\n          body.force.y += force.y;\n          var offset = {\n            x: position.x - body.position.x,\n            y: position.y - body.position.y\n          };\n          body.torque += offset.x * force.y - offset.y * force.x;\n        };\n        /**\n         * Returns the sums of the properties of all compound parts of the parent body.\n         * @method _totalProperties\n         * @private\n         * @param {body} body\n         * @return {}\n         */\n\n\n        Body._totalProperties = function (body) {\n          // from equations at:\n          // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n          // http://output.to/sideway/default.asp?qno=121100087\n          var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: {\n              x: 0,\n              y: 0\n            }\n          }; // sum the properties of all compound parts of the parent body\n\n          for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n          }\n\n          properties.centre = Vector.div(properties.centre, properties.mass);\n          return properties;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a body starts sleeping (where `this` is the body).\n        *\n        * @event sleepStart\n        * @this {body} The body that has started sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a body ends sleeping (where `this` is the body).\n        *\n        * @event sleepEnd\n        * @this {body} The body that has ended sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"body\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Body\"\n         */\n\n        /**\n         * An array of bodies that make up this body. \n         * The first body in the array must always be a self reference to the current body instance.\n         * All bodies in the `parts` array together form a single rigid compound body.\n         * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n         * Parts themselves should never be added to a `World`, only the parent body should be.\n         * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n         *\n         * @property parts\n         * @type body[]\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * A self reference if the body is _not_ a part of another body.\n         * Otherwise this is a reference to the body that this is a part of.\n         * See `body.parts`.\n         *\n         * @property parent\n         * @type body\n         */\n\n        /**\n         * A `Number` specifying the angle of the body, in radians.\n         *\n         * @property angle\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An array of `Vector` objects that specify the convex hull of the rigid body.\n         * These should be provided about the origin `(0, 0)`. E.g.\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n         * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n         *\n         * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n         * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n         *\n         * @property vertices\n         * @type vector[]\n         */\n\n        /**\n         * A `Vector` that specifies the current world-space position of the body.\n         *\n         * @property position\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n         *\n         * @property force\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n         *\n         * @property torque\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n         *\n         * @readOnly\n         * @property speed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n         *\n         * @readOnly\n         * @property angularSpeed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property velocity\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property angularVelocity\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n         * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n         *\n         * @property isStatic\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n         *\n         * @property isSensor\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n         * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n         *\n         * @property isSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n         * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n         *\n         * @readOnly\n         * @property motion\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n         *\n         * @property sleepThreshold\n         * @type number\n         * @default 60\n         */\n\n        /**\n         * A `Number` that defines the density of the body, that is its mass per unit area.\n         * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n         * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n         *\n         * @property density\n         * @type number\n         * @default 0.001\n         */\n\n        /**\n         * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n         * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n         *\n         * @property mass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse mass of the body (`1 / mass`).\n         * If you modify this value, you must also modify the `body.mass` property.\n         *\n         * @property inverseMass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n         * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n         *\n         * @property inertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n         * If you modify this value, you must also modify the `body.inertia` property.\n         *\n         * @property inverseInertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n         * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n         * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n         *\n         *     Math.max(bodyA.restitution, bodyB.restitution)\n         *\n         * @property restitution\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means that the body may slide indefinitely.\n         * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n         *\n         * The effects of the value may be non-linear. \n         * High values may be unstable depending on the body.\n         * The engine uses a Coulomb friction model including static and kinetic friction.\n         * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n         *\n         *     Math.min(bodyA.friction, bodyB.friction)\n         *\n         * @property friction\n         * @type number\n         * @default 0.1\n         */\n\n        /**\n         * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n         * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n         * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n         * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n         *\n         * @property frictionStatic\n         * @type number\n         * @default 0.5\n         */\n\n        /**\n         * A `Number` that defines the air friction of the body (air resistance). \n         * A value of `0` means the body will never slow as it moves through space.\n         * The higher the value, the faster a body slows when moving through space.\n         * The effects of the value are non-linear. \n         *\n         * @property frictionAir\n         * @type number\n         * @default 0.01\n         */\n\n        /**\n         * An `Object` that specifies the collision filtering properties of this body.\n         *\n         * Collisions between two bodies will obey the following rules:\n         * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n         *   they will always collide if the value is positive, and they will never collide\n         *   if the value is negative.\n         * - If the two bodies have different values of `collisionFilter.group` or if one\n         *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n         *\n         * Each body belongs to a collision category, given by `collisionFilter.category`. This\n         * value is used as a bit field and the category should have only one bit set, meaning that\n         * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n         * different collision categories available.\n         *\n         * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n         * the categories it collides with (the value is the bitwise AND value of all these categories).\n         *\n         * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n         * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n         * are both true.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n        /**\n         * An Integer `Number`, that specifies the collision group this body belongs to.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.group\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * A bit field that specifies the collision category this body belongs to.\n         * The category value should have only one bit set, for example `0x0001`.\n         * This means there are up to 32 unique collision categories available.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.category\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * A bit mask that specifies the collision categories this body may collide with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.mask\n         * @type object\n         * @default -1\n         */\n\n        /**\n         * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n         * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n         * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n         *\n         * @property slop\n         * @type number\n         * @default 0.05\n         */\n\n        /**\n         * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n         *\n         * @property timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the body should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * Sets the opacity to use when rendering.\n         *\n         * @property render.opacity\n         * @type number\n         * @default 1\n        */\n\n        /**\n         * An `Object` that defines the sprite properties to use when rendering, if any.\n         *\n         * @property render.sprite\n         * @type object\n         */\n\n        /**\n         * An `String` that defines the path to the image to use as the sprite texture, if any.\n         *\n         * @property render.sprite.texture\n         * @type string\n         */\n\n        /**\n         * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n         *\n         * @property render.sprite.xScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n         *\n         * @property render.sprite.yScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n          * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n          *\n          * @property render.sprite.xOffset\n          * @type number\n          * @default 0\n          */\n\n        /**\n          * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n          *\n          * @property render.sprite.yOffset\n          * @type number\n          * @default 0\n          */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.fillStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * An array of unique axis vectors (edge normals) used for collision detection.\n         * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n         * They are constantly updated by `Body.update` during the simulation.\n         *\n         * @property axes\n         * @type vector[]\n         */\n\n        /**\n         * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n         *\n         * @property area\n         * @type string\n         * @default \n         */\n\n        /**\n         * A `Bounds` object that defines the AABB region for the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n      })();\n      /***/\n\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n      *\n      * @class Sleeping\n      */\n      var Sleeping = {};\n      module.exports = Sleeping;\n\n      var Events = __webpack_require__(4);\n\n      (function () {\n        Sleeping._motionWakeThreshold = 0.18;\n        Sleeping._motionSleepThreshold = 0.08;\n        Sleeping._minBias = 0.9;\n        /**\n         * Puts bodies to sleep or wakes them up depending on their motion.\n         * @method update\n         * @param {body[]} bodies\n         * @param {number} timeScale\n         */\n\n        Sleeping.update = function (bodies, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // update bodies sleeping status\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed; // wake up bodies if they have a force applied\n\n            if (body.force.x !== 0 || body.force.y !== 0) {\n              Sleeping.set(body, false);\n              continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion); // biased average motion estimation between frames\n\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n              body.sleepCounter += 1;\n              if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n              body.sleepCounter -= 1;\n            }\n          }\n        };\n        /**\n         * Given a set of colliding pairs, wakes the sleeping bodies involved.\n         * @method afterCollisions\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Sleeping.afterCollisions = function (pairs, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // wake up bodies involved in collisions\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i]; // don't wake inactive pairs\n\n            if (!pair.isActive) continue;\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent,\n                bodyB = collision.bodyB.parent; // don't wake if at least one body is static\n\n            if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n              var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n                  movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n              if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                Sleeping.set(sleepingBody, false);\n              }\n            }\n          }\n        };\n        /**\n         * Set a body as sleeping or awake.\n         * @method set\n         * @param {body} body\n         * @param {boolean} isSleeping\n         */\n\n\n        Sleeping.set = function (body, isSleeping) {\n          var wasSleeping = body.isSleeping;\n\n          if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n              Events.trigger(body, 'sleepStart');\n            }\n          } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n              Events.trigger(body, 'sleepEnd');\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n      *\n      * For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n      *\n      * See `Matter.Engine` for collision events.\n      *\n      * @class Collision\n      */\n      var Collision = {};\n      module.exports = Collision;\n\n      var Vertices = __webpack_require__(3);\n\n      var Pair = __webpack_require__(9);\n\n      (function () {\n        var _supports = [];\n        var _overlapAB = {\n          overlap: 0,\n          axis: null\n        };\n        var _overlapBA = {\n          overlap: 0,\n          axis: null\n        };\n        /**\n         * Creates a new collision record.\n         * @method create\n         * @param {body} bodyA The first body part represented by the collision record\n         * @param {body} bodyB The second body part represented by the collision record\n         * @return {collision} A new collision record\n         */\n\n        Collision.create = function (bodyA, bodyB) {\n          return {\n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: {\n              x: 0,\n              y: 0\n            },\n            tangent: {\n              x: 0,\n              y: 0\n            },\n            penetration: {\n              x: 0,\n              y: 0\n            },\n            supports: []\n          };\n        };\n        /**\n         * Detect collision between two bodies.\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n         * @return {collision|null} A collision record if detected, otherwise null\n         */\n\n\n        Collision.collides = function (bodyA, bodyB, pairs) {\n          Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n          if (_overlapAB.overlap <= 0) {\n            return null;\n          }\n\n          Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n          if (_overlapBA.overlap <= 0) {\n            return null;\n          } // reuse collision records for gc efficiency\n\n\n          var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n              collision;\n\n          if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n          } else {\n            collision = pair.collision;\n          }\n\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB;\n          var minOverlap;\n\n          if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n          } else {\n            minOverlap = _overlapBA;\n          }\n\n          var normal = collision.normal,\n              supports = collision.supports,\n              minAxis = minOverlap.axis,\n              minAxisX = minAxis.x,\n              minAxisY = minAxis.y; // ensure normal is facing away from bodyA\n\n          if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n          } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n          }\n\n          collision.tangent.x = -normal.y;\n          collision.tangent.y = normal.x;\n          collision.depth = minOverlap.overlap;\n          collision.penetration.x = normal.x * collision.depth;\n          collision.penetration.y = normal.y * collision.depth; // find support points, there is always either exactly one or two\n\n          var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n              supportCount = 0; // find the supports from bodyB that are inside bodyA\n\n\n          if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n          }\n\n          if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n          } // find the supports from bodyA that are inside bodyB\n\n\n          if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n              supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n              supports[supportCount++] = supportsA[1];\n            }\n          } // account for the edge case of overlapping but no vertex containment\n\n\n          if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n          } // update supports array size\n\n\n          supports.length = supportCount;\n          return collision;\n        };\n        /**\n         * Find the overlap between two sets of vertices.\n         * @method _overlapAxes\n         * @private\n         * @param {object} result\n         * @param {vertices} verticesA\n         * @param {vertices} verticesB\n         * @param {axes} axes\n         */\n\n\n        Collision._overlapAxes = function (result, verticesA, verticesB, axes) {\n          var verticesALength = verticesA.length,\n              verticesBLength = verticesB.length,\n              verticesAX = verticesA[0].x,\n              verticesAY = verticesA[0].y,\n              verticesBX = verticesB[0].x,\n              verticesBY = verticesB[0].y,\n              axesLength = axes.length,\n              overlapMin = Number.MAX_VALUE,\n              overlapAxisNumber = 0,\n              overlap,\n              overlapAB,\n              overlapBA,\n              dot,\n              i,\n              j;\n\n          for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n\n            for (j = 1; j < verticesALength; j += 1) {\n              dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n              if (dot > maxA) {\n                maxA = dot;\n              } else if (dot < minA) {\n                minA = dot;\n              }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n              dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n              if (dot > maxB) {\n                maxB = dot;\n              } else if (dot < minB) {\n                minB = dot;\n              }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n              overlapMin = overlap;\n              overlapAxisNumber = i;\n\n              if (overlap <= 0) {\n                // can not be intersecting\n                break;\n              }\n            }\n          }\n\n          result.axis = axes[overlapAxisNumber];\n          result.overlap = overlapMin;\n        };\n        /**\n         * Projects vertices on an axis and returns an interval.\n         * @method _projectToAxis\n         * @private\n         * @param {} projection\n         * @param {} vertices\n         * @param {} axis\n         */\n\n\n        Collision._projectToAxis = function (projection, vertices, axis) {\n          var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n              max = min;\n\n          for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) {\n              max = dot;\n            } else if (dot < min) {\n              min = dot;\n            }\n          }\n\n          projection.min = min;\n          projection.max = max;\n        };\n        /**\n         * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n         * @method _findSupports\n         * @private\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {vector} normal\n         * @param {number} direction\n         * @return [vector]\n         */\n\n\n        Collision._findSupports = function (bodyA, bodyB, normal, direction) {\n          var vertices = bodyB.vertices,\n              verticesLength = vertices.length,\n              bodyAPositionX = bodyA.position.x,\n              bodyAPositionY = bodyA.position.y,\n              normalX = normal.x * direction,\n              normalY = normal.y * direction,\n              nearestDistance = Number.MAX_VALUE,\n              vertexA,\n              vertexB,\n              vertexC,\n              distance,\n              j; // find deepest vertex relative to the axis\n\n          for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y); // convex hill-climbing\n\n            if (distance < nearestDistance) {\n              nearestDistance = distance;\n              vertexA = vertexB;\n            }\n          } // measure next vertex\n\n\n          vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n          nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y); // compare with previous vertex\n\n          vertexB = vertices[(vertexA.index + 1) % verticesLength];\n\n          if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n            return _supports;\n          }\n\n          _supports[0] = vertexA;\n          _supports[1] = vertexC;\n          return _supports;\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A reference to the pair using this collision record, if there is one.\n         *\n         * @property pair\n         * @type {pair|null}\n         * @default null\n         */\n\n        /**\n         * A flag that indicates if the bodies were colliding when the collision was last updated.\n         * \n         * @property collided\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The first body part represented by the collision (see also `collision.parentA`).\n         * \n         * @property bodyA\n         * @type body\n         */\n\n        /**\n         * The second body part represented by the collision (see also `collision.parentB`).\n         * \n         * @property bodyB\n         * @type body\n         */\n\n        /**\n         * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n         * \n         * @property parentA\n         * @type body\n         */\n\n        /**\n         * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n         * \n         * @property parentB\n         * @type body\n         */\n\n        /**\n         * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n         *\n         * @readOnly\n         * @property depth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n         *\n         * @property normal\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A normalised `Vector` that is the tangent direction to the collision normal.\n         *\n         * @property tangent\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that represents the direction and depth of the collision.\n         *\n         * @property penetration\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * An array of body vertices that represent the support points in the collision.\n         * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n         *\n         * @property supports\n         * @type vector[]\n         * @default []\n         */\n\n      })();\n      /***/\n\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n      *\n      * @class Pair\n      */\n      var Pair = {};\n      module.exports = Pair;\n\n      var Contact = __webpack_require__(17);\n\n      (function () {\n        /**\n         * Creates a pair.\n         * @method create\n         * @param {collision} collision\n         * @param {number} timestamp\n         * @return {pair} A new pair\n         */\n        Pair.create = function (collision, timestamp) {\n          var bodyA = collision.bodyA,\n              bodyB = collision.bodyB;\n          var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n          };\n          Pair.update(pair, collision, timestamp);\n          return pair;\n        };\n        /**\n         * Updates a pair given a collision.\n         * @method update\n         * @param {pair} pair\n         * @param {collision} collision\n         * @param {number} timestamp\n         */\n\n\n        Pair.update = function (pair, collision, timestamp) {\n          var contacts = pair.contacts,\n              supports = collision.supports,\n              activeContacts = pair.activeContacts,\n              parentA = collision.parentA,\n              parentB = collision.parentB,\n              parentAVerticesLength = parentA.vertices.length;\n          pair.isActive = true;\n          pair.timeUpdated = timestamp;\n          pair.collision = collision;\n          pair.separation = collision.depth;\n          pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n          pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n          pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n          pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n          pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n          collision.pair = pair;\n          activeContacts.length = 0;\n\n          for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n              activeContacts.push(contact);\n            } else {\n              activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n          }\n        };\n        /**\n         * Set a pair as active or inactive.\n         * @method setActive\n         * @param {pair} pair\n         * @param {bool} isActive\n         * @param {number} timestamp\n         */\n\n\n        Pair.setActive = function (pair, isActive, timestamp) {\n          if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n          } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n          }\n        };\n        /**\n         * Get the id for the given pair.\n         * @method id\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {string} Unique pairId\n         */\n\n\n        Pair.id = function (bodyA, bodyB) {\n          if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n          } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n      * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n      * The stiffness of constraints can be modified to create springs or elastic.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Constraint\n      */\n      var Constraint = {};\n      module.exports = Constraint;\n\n      var Vertices = __webpack_require__(3);\n\n      var Vector = __webpack_require__(2);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Bounds = __webpack_require__(1);\n\n      var Axes = __webpack_require__(11);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        Constraint._warming = 0.4;\n        Constraint._torqueDampen = 1;\n        Constraint._minLength = 0.000001;\n        /**\n         * Creates a new constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n         * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n         * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {constraint} constraint\n         */\n\n        Constraint.create = function (options) {\n          var constraint = options; // if bodies defined but no points, use body centre\n\n          if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n            x: 0,\n            y: 0\n          };\n          if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n            x: 0,\n            y: 0\n          }; // calculate static length using initial world space points\n\n          var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n              initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n              length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n          constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length; // option defaults\n\n          constraint.id = constraint.id || Common.nextId();\n          constraint.label = constraint.label || 'Constraint';\n          constraint.type = 'constraint';\n          constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n          constraint.damping = constraint.damping || 0;\n          constraint.angularStiffness = constraint.angularStiffness || 0;\n          constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n          constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n          constraint.plugin = {}; // render\n\n          var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n          };\n\n          if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n          } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n          }\n\n          constraint.render = Common.extend(render, constraint.render);\n          return constraint;\n        };\n        /**\n         * Prepares for solving by constraint warming.\n         * @private\n         * @method preSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.preSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n          }\n        };\n        /**\n         * Solves all constraints in a list of collisions.\n         * @private\n         * @method solveAll\n         * @param {constraint[]} constraints\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solveAll = function (constraints, timeScale) {\n          // Solve fixed constraints first.\n          for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n                fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (fixedA || fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          } // Solve free constraints last.\n\n\n          for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (!fixedA && !fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          }\n        };\n        /**\n         * Solves a distance constraint with Gauss-Siedel method.\n         * @private\n         * @method solve\n         * @param {constraint} constraint\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solve = function (constraint, timeScale) {\n          var bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB;\n          if (!bodyA && !bodyB) return; // update reference angle\n\n          if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n          } // update reference angle\n\n\n          if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n          }\n\n          var pointAWorld = pointA,\n              pointBWorld = pointB;\n          if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n          if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n          if (!pointAWorld || !pointBWorld) return;\n          var delta = Vector.sub(pointAWorld, pointBWorld),\n              currentLength = Vector.magnitude(delta); // prevent singularity\n\n          if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n          } // solve distance constraint with Gauss-Siedel method\n\n\n          var difference = (currentLength - constraint.length) / currentLength,\n              stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n              force = Vector.mult(delta, difference * stiffness),\n              massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n              inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n              resistanceTotal = massTotal + inertiaTotal,\n              torque,\n              share,\n              normal,\n              normalVelocity,\n              relativeVelocity;\n\n          if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n            relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n          }\n\n          if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share; // apply forces\n\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n              bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n          }\n\n          if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share; // apply forces\n\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n              bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n          }\n        };\n        /**\n         * Performs body updates required after solving constraints.\n         * @private\n         * @method postSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.postSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            Sleeping.set(body, false); // update geometry and reset\n\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              Vertices.translate(part.vertices, impulse);\n\n              if (j > 0) {\n                part.position.x += impulse.x;\n                part.position.y += impulse.y;\n              }\n\n              if (impulse.angle !== 0) {\n                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                Axes.rotate(part.axes, impulse.angle);\n\n                if (j > 0) {\n                  Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                }\n              }\n\n              Bounds.update(part.bounds, part.vertices, body.velocity);\n            } // dampen the cached impulse for warming next step\n\n\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n          }\n        };\n        /**\n         * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n         * @method pointAWorld\n         * @param {constraint} constraint\n         * @returns {vector} the world-space position\n         */\n\n\n        Constraint.pointAWorld = function (constraint) {\n          return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n          };\n        };\n        /**\n         * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n         * @method pointBWorld\n         * @param {constraint} constraint\n         * @returns {vector} the world-space position\n         */\n\n\n        Constraint.pointBWorld = function (constraint) {\n          return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n          };\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Constraint\"\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the constraint should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the constraint outline.\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the constraint outline.\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the constraint rendering type. \n         * The possible values are 'line', 'pin', 'spring'.\n         * An appropriate render type will be automatically chosen unless one is given in options.\n         *\n         * @property render.type\n         * @type string\n         * @default 'line'\n         */\n\n        /**\n         * A `Boolean` that defines if the constraint's anchor points should be rendered.\n         *\n         * @property render.anchors\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * The first possible `Body` that this constraint is attached to.\n         *\n         * @property bodyA\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The second possible `Body` that this constraint is attached to.\n         *\n         * @property bodyB\n         * @type body\n         * @default null\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n         *\n         * @property pointA\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n         *\n         * @property pointB\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n         * A value of `1` means the constraint should be very stiff.\n         * A value of `0.2` means the constraint acts like a soft spring.\n         *\n         * @property stiffness\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the damping of the constraint, \n         * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n         * Damping will only be apparent when the constraint also has a very low `stiffness`.\n         * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n         * A value of `0` means the constraint will apply no damping.\n         *\n         * @property damping\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that specifies the target resting length of the constraint. \n         * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n         *\n         * @property length\n         * @type number\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n      /***/\n\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n      *\n      * @class Axes\n      */\n      var Axes = {};\n      module.exports = Axes;\n\n      var Vector = __webpack_require__(2);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new set of axes from the given vertices.\n         * @method fromVertices\n         * @param {vertices} vertices\n         * @return {axes} A new axes from the given vertices\n         */\n        Axes.fromVertices = function (vertices) {\n          var axes = {}; // find the unique axes, using edge normal gradients\n\n          for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n                normal = Vector.normalise({\n              x: vertices[j].y - vertices[i].y,\n              y: vertices[i].x - vertices[j].x\n            }),\n                gradient = normal.y === 0 ? Infinity : normal.x / normal.y; // limit precision\n\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n          }\n\n          return Common.values(axes);\n        };\n        /**\n         * Rotates a set of axes by the given angle.\n         * @method rotate\n         * @param {axes} axes\n         * @param {number} angle\n         */\n\n\n        Axes.rotate = function (axes, angle) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Bodies` module contains factory methods for creating rigid body models \n      * with commonly used body configurations (such as rectangles, circles and other polygons).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Bodies\n      */\n      // TODO: true circle bodies\n      var Bodies = {};\n      module.exports = Bodies;\n\n      var Vertices = __webpack_require__(3);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      var Bounds = __webpack_require__(1);\n\n      var Vector = __webpack_require__(2);\n\n      (function () {\n        /**\n         * Creates a new rigid body model with a rectangle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method rectangle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {object} [options]\n         * @return {body} A new rectangle body\n         */\n        Bodies.rectangle = function (x, y, width, height, options) {\n          options = options || {};\n          var rectangle = {\n            label: 'Rectangle Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, rectangle, options));\n        };\n        /**\n         * Creates a new rigid body model with a trapezoid hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method trapezoid\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} slope\n         * @param {object} [options]\n         * @return {body} A new trapezoid body\n         */\n\n\n        Bodies.trapezoid = function (x, y, width, height, slope, options) {\n          options = options || {};\n          slope *= 0.5;\n          var roof = (1 - slope * 2) * width;\n          var x1 = width * slope,\n              x2 = x1 + roof,\n              x3 = x2 + x1,\n              verticesPath;\n\n          if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          }\n\n          var trapezoid = {\n            label: 'Trapezoid Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(verticesPath)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, trapezoid, options));\n        };\n        /**\n         * Creates a new rigid body model with a circle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method circle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} radius\n         * @param {object} [options]\n         * @param {number} [maxSides]\n         * @return {body} A new circle body\n         */\n\n\n        Bodies.circle = function (x, y, radius, options, maxSides) {\n          options = options || {};\n          var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n          }; // approximate circles with polygons until true circles implemented in SAT\n\n          maxSides = maxSides || 25;\n          var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius))); // optimisation: always use even number of sides (half the number of unique axes)\n\n          if (sides % 2 === 1) sides += 1;\n          return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n        };\n        /**\n         * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method polygon\n         * @param {number} x\n         * @param {number} y\n         * @param {number} sides\n         * @param {number} radius\n         * @param {object} [options]\n         * @return {body} A new regular polygon body\n         */\n\n\n        Bodies.polygon = function (x, y, sides, radius, options) {\n          options = options || {};\n          if (sides < 3) return Bodies.circle(x, y, radius, options);\n          var theta = 2 * Math.PI / sides,\n              path = '',\n              offset = theta * 0.5;\n\n          for (var i = 0; i < sides; i += 1) {\n            var angle = offset + i * theta,\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n          }\n\n          var polygon = {\n            label: 'Polygon Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(path)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, polygon, options));\n        };\n        /**\n         * Utility to create a compound body based on set(s) of vertices.\n         * \n         * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n         * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n         * \n         * The resulting vertices are reorientated about their centre of mass,\n         * and offset such that `body.position` corresponds to this point.\n         * \n         * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n         * To later move the centre of mass see `Body.setCentre`.\n         * \n         * Note that automatic conconcave decomposition results are not always optimal. \n         * For best results, simplify the input vertices as much as possible first.\n         * By default this function applies some addtional simplification to help.\n         * \n         * Some outputs may also require further manual processing afterwards to be robust.\n         * In particular some parts may need to be overlapped to avoid collision gaps.\n         * Thin parts and sharp points should be avoided or removed where possible.\n         *\n         * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n         * \n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method fromVertices\n         * @param {number} x\n         * @param {number} y\n         * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n         * @param {object} [options] The body options.\n         * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n         * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n         * @param {number} [minimumArea=10] Threshold when removing small parts.\n         * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n         * @return {body}\n         */\n\n\n        Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n          var decomp = Common.getDecomp(),\n              canDecomp,\n              body,\n              parts,\n              isConvex,\n              isConcave,\n              vertices,\n              i,\n              j,\n              k,\n              v,\n              z; // check decomp is as expected\n\n          canDecomp = Boolean(decomp && decomp.quickDecomp);\n          options = options || {};\n          parts = [];\n          flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n          removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n          minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n          removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01; // ensure vertexSets is an array of arrays\n\n          if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n          }\n\n          for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n              Common.warnOnce('Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.');\n            }\n\n            if (isConvex || !canDecomp) {\n              if (isConvex) {\n                vertices = Vertices.clockwiseSort(vertices);\n              } else {\n                // fallback to convex hull when decomposition is not possible\n                vertices = Vertices.hull(vertices);\n              }\n\n              parts.push({\n                position: {\n                  x: x,\n                  y: y\n                },\n                vertices: vertices\n              });\n            } else {\n              // initialise a decomposition\n              var concave = vertices.map(function (vertex) {\n                return [vertex.x, vertex.y];\n              }); // vertices are concave and simple, we can decompose into parts\n\n              decomp.makeCCW(concave);\n              if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);\n              if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints) decomp.removeDuplicatePoints(concave, removeDuplicatePoints); // use the quick decomposition algorithm (Bayazit)\n\n              var decomposed = decomp.quickDecomp(concave); // for each decomposed chunk\n\n              for (i = 0; i < decomposed.length; i++) {\n                var chunk = decomposed[i]; // convert vertices into the correct structure\n\n                var chunkVertices = chunk.map(function (vertices) {\n                  return {\n                    x: vertices[0],\n                    y: vertices[1]\n                  };\n                }); // skip small chunks\n\n                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue; // create a compound part\n\n                parts.push({\n                  position: Vertices.centre(chunkVertices),\n                  vertices: chunkVertices\n                });\n              }\n            }\n          } // create body parts\n\n\n          for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n          } // flag internal edges (coincident part edges)\n\n\n          if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n              var partA = parts[i];\n\n              for (j = i + 1; j < parts.length; j++) {\n                var partB = parts[j];\n\n                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                  var pav = partA.vertices,\n                      pbv = partB.vertices; // iterate vertices of both parts\n\n                  for (k = 0; k < partA.vertices.length; k++) {\n                    for (z = 0; z < partB.vertices.length; z++) {\n                      // find distances between the vertices\n                      var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                          db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length])); // if both vertices are very close, consider the edge concident (internal)\n\n                      if (da < coincident_max_dist && db < coincident_max_dist) {\n                        pav[k].isInternal = true;\n                        pbv[z].isInternal = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({\n              parts: parts.slice(0)\n            }, options)); // offset such that body.position is at the centre off mass\n\n            Body.setPosition(body, {\n              x: x,\n              y: y\n            });\n            return body;\n          } else {\n            return parts[0];\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n      *\n      * @class Mouse\n      */\n      var Mouse = {};\n      module.exports = Mouse;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a mouse input.\n         * @method create\n         * @param {HTMLElement} element\n         * @return {mouse} A new mouse\n         */\n        Mouse.create = function (element) {\n          var mouse = {};\n\n          if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n          }\n\n          mouse.element = element || document.body;\n          mouse.absolute = {\n            x: 0,\n            y: 0\n          };\n          mouse.position = {\n            x: 0,\n            y: 0\n          };\n          mouse.mousedownPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.mouseupPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.offset = {\n            x: 0,\n            y: 0\n          };\n          mouse.scale = {\n            x: 1,\n            y: 1\n          };\n          mouse.wheelDelta = 0;\n          mouse.button = -1;\n          mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n          mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n          };\n\n          mouse.mousemove = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n          };\n\n          mouse.mousedown = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            } else {\n              mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n          };\n\n          mouse.mouseup = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              event.preventDefault();\n            }\n\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n          };\n\n          mouse.mousewheel = function (event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n          };\n\n          Mouse.setElement(mouse, mouse.element);\n          return mouse;\n        };\n        /**\n         * Sets the element the mouse is bound to (and relative to).\n         * @method setElement\n         * @param {mouse} mouse\n         * @param {HTMLElement} element\n         */\n\n\n        Mouse.setElement = function (mouse, element) {\n          mouse.element = element;\n          element.addEventListener('mousemove', mouse.mousemove);\n          element.addEventListener('mousedown', mouse.mousedown);\n          element.addEventListener('mouseup', mouse.mouseup);\n          element.addEventListener('mousewheel', mouse.mousewheel);\n          element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n          element.addEventListener('touchmove', mouse.mousemove);\n          element.addEventListener('touchstart', mouse.mousedown);\n          element.addEventListener('touchend', mouse.mouseup);\n        };\n        /**\n         * Clears all captured source events.\n         * @method clearSourceEvents\n         * @param {mouse} mouse\n         */\n\n\n        Mouse.clearSourceEvents = function (mouse) {\n          mouse.sourceEvents.mousemove = null;\n          mouse.sourceEvents.mousedown = null;\n          mouse.sourceEvents.mouseup = null;\n          mouse.sourceEvents.mousewheel = null;\n          mouse.wheelDelta = 0;\n        };\n        /**\n         * Sets the mouse position offset.\n         * @method setOffset\n         * @param {mouse} mouse\n         * @param {vector} offset\n         */\n\n\n        Mouse.setOffset = function (mouse, offset) {\n          mouse.offset.x = offset.x;\n          mouse.offset.y = offset.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Sets the mouse position scale.\n         * @method setScale\n         * @param {mouse} mouse\n         * @param {vector} scale\n         */\n\n\n        Mouse.setScale = function (mouse, scale) {\n          mouse.scale.x = scale.x;\n          mouse.scale.y = scale.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Gets the mouse position relative to an element given a screen pixel ratio.\n         * @method _getRelativeMousePosition\n         * @private\n         * @param {} event\n         * @param {} element\n         * @param {number} pixelRatio\n         * @return {}\n         */\n\n\n        Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n          var elementBounds = element.getBoundingClientRect(),\n              rootNode = document.documentElement || document.body.parentNode || document.body,\n              scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n              scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n              touches = event.changedTouches,\n              x,\n              y;\n\n          if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n          } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n          }\n\n          return {\n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n          };\n        };\n      })();\n      /***/\n\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n      *\n      * @class Detector\n      */\n      var Detector = {};\n      module.exports = Detector;\n\n      var Common = __webpack_require__(0);\n\n      var Collision = __webpack_require__(8);\n\n      (function () {\n        /**\n         * Creates a new collision detector.\n         * @method create\n         * @param {} options\n         * @return {detector} A new collision detector\n         */\n        Detector.create = function (options) {\n          var defaults = {\n            bodies: [],\n            pairs: null\n          };\n          return Common.extend(defaults, options);\n        };\n        /**\n         * Sets the list of bodies in the detector.\n         * @method setBodies\n         * @param {detector} detector\n         * @param {body[]} bodies\n         */\n\n\n        Detector.setBodies = function (detector, bodies) {\n          detector.bodies = bodies.slice(0);\n        };\n        /**\n         * Clears the detector including its list of bodies.\n         * @method clear\n         * @param {detector} detector\n         */\n\n\n        Detector.clear = function (detector) {\n          detector.bodies = [];\n        };\n        /**\n         * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n         * \n         * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n         * If a specific ordering is required then apply a sort to the resulting array.\n         * @method collisions\n         * @param {detector} detector\n         * @return {collision[]} collisions\n         */\n\n\n        Detector.collisions = function (detector) {\n          var collisions = [],\n              pairs = detector.pairs,\n              bodies = detector.bodies,\n              bodiesLength = bodies.length,\n              canCollide = Detector.canCollide,\n              collides = Collision.collides,\n              i,\n              j;\n          bodies.sort(Detector._compareBoundsX);\n\n          for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n              var bodyB = bodies[j],\n                  boundsB = bodyB.bounds;\n\n              if (boundsB.min.x > boundXMax) {\n                break;\n              }\n\n              if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                continue;\n              }\n\n              if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                continue;\n              }\n\n              if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                continue;\n              }\n\n              var partsBLength = bodyB.parts.length;\n\n              if (partsASingle && partsBLength === 1) {\n                var collision = collides(bodyA, bodyB, pairs);\n\n                if (collision) {\n                  collisions.push(collision);\n                }\n              } else {\n                var partsAStart = partsALength > 1 ? 1 : 0,\n                    partsBStart = partsBLength > 1 ? 1 : 0;\n\n                for (var k = partsAStart; k < partsALength; k++) {\n                  var partA = bodyA.parts[k],\n                      boundsA = partA.bounds;\n\n                  for (var z = partsBStart; z < partsBLength; z++) {\n                    var partB = bodyB.parts[z],\n                        boundsB = partB.bounds;\n\n                    if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                      continue;\n                    }\n\n                    var collision = collides(partA, partB, pairs);\n\n                    if (collision) {\n                      collisions.push(collision);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns `true` if both supplied collision filters will allow a collision to occur.\n         * See `body.collisionFilter` for more information.\n         * @method canCollide\n         * @param {} filterA\n         * @param {} filterB\n         * @return {bool} `true` if collision can occur\n         */\n\n\n        Detector.canCollide = function (filterA, filterB) {\n          if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n          return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n        };\n        /**\n         * The comparison function used in the broadphase algorithm.\n         * Returns the signed delta of the bodies bounds on the x-axis.\n         * @private\n         * @method _sortCompare\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {number} The signed delta used for sorting\n         */\n\n\n        Detector._compareBoundsX = function (bodyA, bodyB) {\n          return bodyA.bounds.min.x - bodyB.bounds.min.x;\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * The array of `Matter.Body` between which the detector finds collisions.\n         * \n         * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n         * @property pairs\n         * @type {pairs|null}\n         * @default null\n         */\n\n      })();\n      /***/\n\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n      *\n      * @class Plugin\n      */\n      var Plugin = {};\n      module.exports = Plugin;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        Plugin._registry = {};\n        /**\n         * Registers a plugin object so it can be resolved later by name.\n         * @method register\n         * @param plugin {} The plugin to register.\n         * @return {object} The plugin.\n         */\n\n        Plugin.register = function (plugin) {\n          if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n          }\n\n          if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n              Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n              Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n          } else {\n            Plugin._registry[plugin.name] = plugin;\n          }\n\n          return plugin;\n        };\n        /**\n         * Resolves a dependency to a plugin object from the registry if it exists. \n         * The `dependency` may contain a version, but only the name matters when resolving.\n         * @method resolve\n         * @param dependency {string} The dependency.\n         * @return {object} The plugin if resolved, otherwise `undefined`.\n         */\n\n\n        Plugin.resolve = function (dependency) {\n          return Plugin._registry[Plugin.dependencyParse(dependency).name];\n        };\n        /**\n         * Returns a pretty printed plugin name and version.\n         * @method toString\n         * @param plugin {} The plugin.\n         * @return {string} Pretty printed plugin name and version.\n         */\n\n\n        Plugin.toString = function (plugin) {\n          return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n        };\n        /**\n         * Returns `true` if the object meets the minimum standard to be considered a plugin.\n         * This means it must define the following properties:\n         * - `name`\n         * - `version`\n         * - `install`\n         * @method isPlugin\n         * @param obj {} The obj to test.\n         * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n         */\n\n\n        Plugin.isPlugin = function (obj) {\n          return obj && obj.name && obj.version && obj.install;\n        };\n        /**\n         * Returns `true` if a plugin with the given `name` been installed on `module`.\n         * @method isUsed\n         * @param module {} The module.\n         * @param name {string} The plugin name.\n         * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n         */\n\n\n        Plugin.isUsed = function (module, name) {\n          return module.used.indexOf(name) > -1;\n        };\n        /**\n         * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n         * If `plugin.for` is not specified then it is assumed to be applicable.\n         * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n         * @method isFor\n         * @param plugin {} The plugin.\n         * @param module {} The module.\n         * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n         */\n\n\n        Plugin.isFor = function (plugin, module) {\n          var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n          return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n        };\n        /**\n         * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n         * For installing plugins on `Matter` see the convenience function `Matter.use`.\n         * Plugins may be specified either by their name or a reference to the plugin object.\n         * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n         * Order is important, a topological sort is performed to find the best resulting order of installation.\n         * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n         * This function logs the resulting status of each dependency in the console, along with any warnings.\n         * - A green tick ✅ indicates a dependency was resolved and installed.\n         * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n         * - A red cross ❌ indicates a dependency could not be resolved.\n         * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n         * @method use\n         * @param module {} The module install plugins on.\n         * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n         */\n\n\n        Plugin.use = function (module, plugins) {\n          module.uses = (module.uses || []).concat(plugins || []);\n\n          if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n          }\n\n          var dependencies = Plugin.dependencies(module),\n              sortedDependencies = Common.topologicalSort(dependencies),\n              status = [];\n\n          for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n              continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n              status.push('❌ ' + sortedDependencies[i]);\n              continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n              continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n              plugin._warned = true;\n            }\n\n            if (plugin.install) {\n              plugin.install(module);\n            } else {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n              plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n              status.push('🔶 ' + Plugin.toString(plugin));\n              delete plugin._warned;\n            } else {\n              status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n          }\n\n          if (status.length > 0) {\n            Common.info(status.join('  '));\n          }\n        };\n        /**\n         * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n         * @method dependencies\n         * @param module {} The module.\n         * @return {object} A dependency graph.\n         */\n\n\n        Plugin.dependencies = function (module, tracked) {\n          var parsedBase = Plugin.dependencyParse(module),\n              name = parsedBase.name;\n          tracked = tracked || {};\n\n          if (name in tracked) {\n            return;\n          }\n\n          module = Plugin.resolve(module) || module;\n          tracked[name] = Common.map(module.uses || [], function (dependency) {\n            if (Plugin.isPlugin(dependency)) {\n              Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n              resolved._warned = true;\n              module._warned = true;\n            } else if (!resolved) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n              module._warned = true;\n            }\n\n            return parsed.name;\n          });\n\n          for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n          }\n\n          return tracked;\n        };\n        /**\n         * Parses a dependency string into its components.\n         * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * This function can also handle dependencies that are already resolved (e.g. a module object).\n         * @method dependencyParse\n         * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n         * @return {object} The dependency parsed into its components.\n         */\n\n\n        Plugin.dependencyParse = function (dependency) {\n          if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n              Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n              name: dependency.split('@')[0],\n              range: dependency.split('@')[1] || '*'\n            };\n          }\n\n          return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n          };\n        };\n        /**\n         * Parses a version string into its components.  \n         * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n         * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n         * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n         * Only the following range types are supported:\n         * - Tilde ranges e.g. `~1.2.3`\n         * - Caret ranges e.g. `^1.2.3`\n         * - Greater than ranges e.g. `>1.2.3`\n         * - Greater than or equal ranges e.g. `>=1.2.3`\n         * - Exact version e.g. `1.2.3`\n         * - Any version `*`\n         * @method versionParse\n         * @param range {string} The version string.\n         * @return {object} The version range parsed into its components.\n         */\n\n\n        Plugin.versionParse = function (range) {\n          var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n          if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n          }\n\n          var parts = pattern.exec(range);\n          var major = Number(parts[4]);\n          var minor = Number(parts[5]);\n          var patch = Number(parts[6]);\n          return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n          };\n        };\n        /**\n         * Returns `true` if `version` satisfies the given `range`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n         * @method versionSatisfies\n         * @param version {string} The version string.\n         * @param range {string} The range string.\n         * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n         */\n\n\n        Plugin.versionSatisfies = function (version, range) {\n          range = range || '*';\n          var r = Plugin.versionParse(range),\n              v = Plugin.versionParse(version);\n\n          if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n              return true;\n            }\n\n            if (r.operator === '>') {\n              return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n              return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n              return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n              if (r.major > 0) {\n                return v.major === r.major && v.number >= r.number;\n              }\n\n              if (r.minor > 0) {\n                return v.minor === r.minor && v.patch >= r.patch;\n              }\n\n              return v.patch === r.patch;\n            }\n          }\n\n          return version === range || version === '*';\n        };\n      })();\n      /***/\n\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n      *\n      * @class Render\n      */\n      var Render = {};\n      module.exports = Render;\n\n      var Common = __webpack_require__(0);\n\n      var Composite = __webpack_require__(5);\n\n      var Bounds = __webpack_require__(1);\n\n      var Events = __webpack_require__(4);\n\n      var Vector = __webpack_require__(2);\n\n      var Mouse = __webpack_require__(13);\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        Render._goodFps = 30;\n        Render._goodDelta = 1000 / 60;\n        /**\n         * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {render} A new renderer\n         */\n\n        Render.create = function (options) {\n          var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n              historySize: 60,\n              delta: 0,\n              deltaHistory: [],\n              lastTime: 0,\n              lastTimestamp: 0,\n              lastElapsed: 0,\n              timestampElapsed: 0,\n              timestampElapsedHistory: [],\n              engineDeltaHistory: [],\n              engineElapsedHistory: [],\n              elapsedHistory: []\n            },\n            options: {\n              width: 800,\n              height: 600,\n              pixelRatio: 1,\n              background: '#14151f',\n              wireframeBackground: '#14151f',\n              hasBounds: !!options.bounds,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showStats: false,\n              showPerformance: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showSeparations: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showVertexNumbers: false,\n              showConvexHulls: false,\n              showInternalEdges: false,\n              showMousePosition: false\n            }\n          };\n          var render = Common.extend(defaults, options);\n\n          if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n          }\n\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n          render.context = render.canvas.getContext('2d');\n          render.textures = {};\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.canvas.width,\n              y: render.canvas.height\n            }\n          }; // for temporary back compatibility only\n\n          render.options.showBroadphase = false;\n\n          if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n          }\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n          }\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         */\n\n\n        Render.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n\n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n              Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n              Render.performance(render, render.context, time);\n            }\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         */\n\n\n        Render.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Sets the pixel ratio of the renderer and updates the canvas.\n         * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n         * @method setPixelRatio\n         * @param {render} render\n         * @param {number} pixelRatio\n         */\n\n\n        Render.setPixelRatio = function (render, pixelRatio) {\n          var options = render.options,\n              canvas = render.canvas;\n\n          if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n          }\n\n          options.pixelRatio = pixelRatio;\n          canvas.setAttribute('data-pixel-ratio', pixelRatio);\n          canvas.width = options.width * pixelRatio;\n          canvas.height = options.height * pixelRatio;\n          canvas.style.width = options.width + 'px';\n          canvas.style.height = options.height + 'px';\n        };\n        /**\n         * Positions and sizes the viewport around the given object bounds.\n         * Objects must have at least one of the following properties:\n         * - `object.bounds`\n         * - `object.position`\n         * - `object.min` and `object.max`\n         * - `object.x` and `object.y`\n         * @method lookAt\n         * @param {render} render\n         * @param {object[]} objects\n         * @param {vector} [padding]\n         * @param {bool} [center=true]\n         */\n\n\n        Render.lookAt = function (render, objects, padding, center) {\n          center = typeof center !== 'undefined' ? center : true;\n          objects = Common.isArray(objects) ? objects : [objects];\n          padding = padding || {\n            x: 0,\n            y: 0\n          }; // find bounds of all objects\n\n          var bounds = {\n            min: {\n              x: Infinity,\n              y: Infinity\n            },\n            max: {\n              x: -Infinity,\n              y: -Infinity\n            }\n          };\n\n          for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : object.min || object.position || object,\n                max = object.bounds ? object.bounds.max : object.max || object.position || object;\n\n            if (min && max) {\n              if (min.x < bounds.min.x) bounds.min.x = min.x;\n              if (max.x > bounds.max.x) bounds.max.x = max.x;\n              if (min.y < bounds.min.y) bounds.min.y = min.y;\n              if (max.y > bounds.max.y) bounds.max.y = max.y;\n            }\n          } // find ratios\n\n\n          var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n              height = bounds.max.y - bounds.min.y + 2 * padding.y,\n              viewHeight = render.canvas.height,\n              viewWidth = render.canvas.width,\n              outerRatio = viewWidth / viewHeight,\n              innerRatio = width / height,\n              scaleX = 1,\n              scaleY = 1; // find scale factor\n\n          if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n          } else {\n            scaleX = outerRatio / innerRatio;\n          } // enable bounds\n\n\n          render.options.hasBounds = true; // position and size\n\n          render.bounds.min.x = bounds.min.x;\n          render.bounds.max.x = bounds.min.x + width * scaleX;\n          render.bounds.min.y = bounds.min.y;\n          render.bounds.max.y = bounds.min.y + height * scaleY; // center\n\n          if (center) {\n            render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n            render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n          } // padding\n\n\n          render.bounds.min.x -= padding.x;\n          render.bounds.max.x -= padding.x;\n          render.bounds.min.y -= padding.y;\n          render.bounds.max.y -= padding.y; // update mouse\n\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        };\n        /**\n         * Applies viewport transforms based on `render.bounds` to a render context.\n         * @method startViewTransform\n         * @param {render} render\n         */\n\n\n        Render.startViewTransform = function (render) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n          render.context.setTransform(render.options.pixelRatio / boundsScaleX, 0, 0, render.options.pixelRatio / boundsScaleY, 0, 0);\n          render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        };\n        /**\n         * Resets all transforms on the render context.\n         * @method endViewTransform\n         * @param {render} render\n         */\n\n\n        Render.endViewTransform = function (render) {\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n        };\n        /**\n         * Renders the given `engine`'s `Matter.World` object.\n         * This is the entry point for all rendering and should be called every time the scene changes.\n         * @method world\n         * @param {render} render\n         */\n\n\n        Render.world = function (render, time) {\n          var startTime = Common.now(),\n              engine = render.engine,\n              world = engine.world,\n              canvas = render.canvas,\n              context = render.context,\n              options = render.options,\n              timing = render.timing;\n          var allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              background = options.wireframes ? options.wireframeBackground : options.background,\n              bodies = [],\n              constraints = [],\n              i;\n          var event = {\n            timestamp: engine.timing.timestamp\n          };\n          Events.trigger(render, 'beforeRender', event); // apply background if it has changed\n\n          if (render.currentBackground !== background) _applyBackground(render, background); // clear the canvas with a transparent fill, to allow the canvas background to show\n\n          context.globalCompositeOperation = 'source-in';\n          context.fillStyle = \"transparent\";\n          context.fillRect(0, 0, canvas.width, canvas.height);\n          context.globalCompositeOperation = 'source-over'; // handle bounds\n\n          if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n              var body = allBodies[i];\n              if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            Render.startViewTransform(render); // update mouse\n\n            if (render.mouse) {\n              Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n              });\n              Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n          } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n              render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n          }\n\n          if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n          } else {\n            if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context); // optimised method for wireframes only\n\n            Render.bodyWireframes(render, bodies, context);\n          }\n\n          if (options.showBounds) Render.bodyBounds(render, bodies, context);\n          if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n          if (options.showPositions) Render.bodyPositions(render, bodies, context);\n          if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n          if (options.showIds) Render.bodyIds(render, bodies, context);\n          if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n          if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n          if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n          if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n          Render.constraints(constraints, context);\n\n          if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n          }\n\n          Events.trigger(render, 'afterRender', event); // log the time elapsed computing this update\n\n          timing.lastElapsed = Common.now() - startTime;\n        };\n        /**\n         * Renders statistics about the engine and world useful for debugging.\n         * @private\n         * @method stats\n         * @param {render} render\n         * @param {RenderingContext} context\n         * @param {Number} time\n         */\n\n\n        Render.stats = function (render, context, time) {\n          var engine = render.engine,\n              world = engine.world,\n              bodies = Composite.allBodies(world),\n              parts = 0,\n              width = 55,\n              height = 44,\n              x = 0,\n              y = 0; // count parts\n\n          for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n          } // sections\n\n\n          var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n          }; // background\n\n          context.fillStyle = '#0e0f19';\n          context.fillRect(x, y, width * 5.5, height);\n          context.font = '12px Arial';\n          context.textBaseline = 'top';\n          context.textAlign = 'right'; // sections\n\n          for (var key in sections) {\n            var section = sections[key]; // label\n\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8); // value\n\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n            x += width;\n          }\n        };\n        /**\n         * Renders engine and render performance information.\n         * @private\n         * @method performance\n         * @param {render} render\n         * @param {RenderingContext} context\n         */\n\n\n        Render.performance = function (render, context) {\n          var engine = render.engine,\n              timing = render.timing,\n              deltaHistory = timing.deltaHistory,\n              elapsedHistory = timing.elapsedHistory,\n              timestampElapsedHistory = timing.timestampElapsedHistory,\n              engineDeltaHistory = timing.engineDeltaHistory,\n              engineElapsedHistory = timing.engineElapsedHistory,\n              lastEngineDelta = engine.timing.lastDelta;\n\n          var deltaMean = _mean(deltaHistory),\n              elapsedMean = _mean(elapsedHistory),\n              engineDeltaMean = _mean(engineDeltaHistory),\n              engineElapsedMean = _mean(engineElapsedHistory),\n              timestampElapsedMean = _mean(timestampElapsedHistory),\n              rateMean = timestampElapsedMean / deltaMean || 0,\n              fps = 1000 / deltaMean || 0;\n\n          var graphHeight = 4,\n              gap = 12,\n              width = 60,\n              height = 34,\n              x = 10,\n              y = 69; // background\n\n          context.fillStyle = '#0e0f19';\n          context.fillRect(0, 50, gap * 4 + width * 5 + 22, height); // show FPS\n\n          Render.status(context, x, y, width, graphHeight, deltaHistory.length, Math.round(fps) + ' fps', fps / Render._goodFps, function (i) {\n            return deltaHistory[i] / deltaMean - 1;\n          }); // show engine delta\n\n          Render.status(context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length, lastEngineDelta.toFixed(2) + ' dt', Render._goodDelta / lastEngineDelta, function (i) {\n            return engineDeltaHistory[i] / engineDeltaMean - 1;\n          }); // show engine update time\n\n          Render.status(context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length, engineElapsedMean.toFixed(2) + ' ut', 1 - engineElapsedMean / Render._goodFps, function (i) {\n            return engineElapsedHistory[i] / engineElapsedMean - 1;\n          }); // show render time\n\n          Render.status(context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length, elapsedMean.toFixed(2) + ' rt', 1 - elapsedMean / Render._goodFps, function (i) {\n            return elapsedHistory[i] / elapsedMean - 1;\n          }); // show effective speed\n\n          Render.status(context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, rateMean.toFixed(2) + ' x', rateMean * rateMean * rateMean, function (i) {\n            return (timestampElapsedHistory[i] / deltaHistory[i] / rateMean || 0) - 1;\n          });\n        };\n        /**\n         * Renders a label, indicator and a chart.\n         * @private\n         * @method status\n         * @param {RenderingContext} context\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} count\n         * @param {string} label\n         * @param {string} indicator\n         * @param {function} plotY\n         */\n\n\n        Render.status = function (context, x, y, width, height, count, label, indicator, plotY) {\n          // background\n          context.strokeStyle = '#888';\n          context.fillStyle = '#444';\n          context.lineWidth = 1;\n          context.fillRect(x, y + 7, width, 1); // chart\n\n          context.beginPath();\n          context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n\n          for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n          }\n\n          context.stroke(); // indicator\n\n          context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n          context.fillRect(x, y - 7, 4, 4); // label\n\n          context.font = '12px Arial';\n          context.textBaseline = 'middle';\n          context.textAlign = 'right';\n          context.fillStyle = '#eee';\n          context.fillText(label, x + width, y - 5);\n        };\n        /**\n         * Description\n         * @private\n         * @method constraints\n         * @param {constraint[]} constraints\n         * @param {RenderingContext} context\n         */\n\n\n        Render.constraints = function (constraints, context) {\n          var c = context;\n\n          for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n              start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n              start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              if (bodyB) {\n                end = Vector.add(bodyB.position, constraint.pointB);\n              } else {\n                end = constraint.pointB;\n              }\n\n              c.beginPath();\n              c.moveTo(start.x, start.y);\n\n              if (constraint.render.type === 'spring') {\n                var delta = Vector.sub(end, start),\n                    normal = Vector.perp(Vector.normalise(delta)),\n                    coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                    offset;\n\n                for (var j = 1; j < coils; j += 1) {\n                  offset = j % 2 === 0 ? 1 : -1;\n                  c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                }\n              }\n\n              c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n              c.lineWidth = constraint.render.lineWidth;\n              c.strokeStyle = constraint.render.strokeStyle;\n              c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n              c.fillStyle = constraint.render.strokeStyle;\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n              c.fill();\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodies\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodies = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              showInternalEdges = options.showInternalEdges || !options.wireframes,\n              body,\n              part,\n              i,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              if (!part.render.visible) continue;\n\n              if (options.showSleeping && body.isSleeping) {\n                c.globalAlpha = 0.5 * part.render.opacity;\n              } else if (part.render.opacity !== 1) {\n                c.globalAlpha = part.render.opacity;\n              }\n\n              if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                // part sprite\n                var sprite = part.render.sprite,\n                    texture = _getTexture(render, sprite.texture);\n\n                c.translate(part.position.x, part.position.y);\n                c.rotate(part.angle);\n                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale); // revert translation, hopefully faster than save / restore\n\n                c.rotate(-part.angle);\n                c.translate(-part.position.x, -part.position.y);\n              } else {\n                // part polygon\n                if (part.circleRadius) {\n                  c.beginPath();\n                  c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                } else {\n                  c.beginPath();\n                  c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                  for (var j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                      c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                      c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                      c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                  }\n\n                  c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                  c.closePath();\n                }\n\n                if (!options.wireframes) {\n                  c.fillStyle = part.render.fillStyle;\n\n                  if (part.render.lineWidth) {\n                    c.lineWidth = part.render.lineWidth;\n                    c.strokeStyle = part.render.strokeStyle;\n                    c.stroke();\n                  }\n\n                  c.fill();\n                } else {\n                  c.lineWidth = 1;\n                  c.strokeStyle = '#bbb';\n                  c.stroke();\n                }\n              }\n\n              c.globalAlpha = 1;\n            }\n          }\n        };\n        /**\n         * Optimised method for drawing body wireframes in one pass\n         * @private\n         * @method bodyWireframes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyWireframes = function (render, bodies, context) {\n          var c = context,\n              showInternalEdges = render.options.showInternalEdges,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render all bodies\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n              for (j = 1; j < part.vertices.length; j++) {\n                if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                  c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                } else {\n                  c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                }\n\n                if (part.vertices[j].isInternal && !showInternalEdges) {\n                  c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                }\n              }\n\n              c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = '#bbb';\n          c.stroke();\n        };\n        /**\n         * Optimised method for drawing body convex hull wireframes in one pass\n         * @private\n         * @method bodyConvexHulls\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyConvexHulls = function (render, bodies, context) {\n          var c = context,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render convex hulls\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible || body.parts.length === 1) continue;\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n              c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = 'rgba(255,255,255,0.2)';\n          c.stroke();\n        };\n        /**\n         * Renders body vertex numbers.\n         * @private\n         * @method vertexNumbers\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.vertexNumbers = function (render, bodies, context) {\n          var c = context,\n              i,\n              j,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n              var part = parts[k];\n\n              for (j = 0; j < part.vertices.length; j++) {\n                c.fillStyle = 'rgba(255,255,255,0.2)';\n                c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n              }\n            }\n          }\n        };\n        /**\n         * Renders mouse position.\n         * @private\n         * @method mousePosition\n         * @param {render} render\n         * @param {mouse} mouse\n         * @param {RenderingContext} context\n         */\n\n\n        Render.mousePosition = function (render, mouse, context) {\n          var c = context;\n          c.fillStyle = 'rgba(255,255,255,0.8)';\n          c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n        };\n        /**\n         * Draws body bounds\n         * @private\n         * @method bodyBounds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyBounds = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n              var parts = bodies[i].parts;\n\n              for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n          } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Draws body angle indicators and axes\n         * @private\n         * @method bodyAxes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyAxes = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath();\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n            if (!body.render.visible) continue;\n\n            if (options.showAxes) {\n              // render all axes\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  var axis = part.axes[k];\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                }\n              }\n            } else {\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  // render a single axis indicator\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                }\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n          } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n          }\n\n          c.stroke();\n          c.globalCompositeOperation = 'source-over';\n        };\n        /**\n         * Draws body positions\n         * @private\n         * @method bodyPositions\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyPositions = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              body,\n              part,\n              i,\n              k;\n          c.beginPath(); // render current positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'indianred';\n          } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n          }\n\n          c.fill();\n          c.beginPath(); // render previous positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (body.render.visible) {\n              c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          c.fillStyle = 'rgba(255,165,0,0.8)';\n          c.fill();\n        };\n        /**\n         * Draws body velocity\n         * @private\n         * @method bodyVelocity\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyVelocity = function (render, bodies, context) {\n          var c = context;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n          }\n\n          c.lineWidth = 3;\n          c.strokeStyle = 'cornflowerblue';\n          c.stroke();\n        };\n        /**\n         * Draws body ids\n         * @private\n         * @method bodyIds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyIds = function (render, bodies, context) {\n          var c = context,\n              i,\n              j;\n\n          for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible) continue;\n            var parts = bodies[i].parts;\n\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.font = \"12px Arial\";\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n              c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method collisions\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.collisions = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render collision positions\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            for (j = 0; j < pair.activeContacts.length; j++) {\n              var contact = pair.activeContacts[j],\n                  vertex = contact.vertex;\n              c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n          } else {\n            c.fillStyle = 'orange';\n          }\n\n          c.fill();\n          c.beginPath(); // render collision normals\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n              var normalPosX = pair.activeContacts[0].vertex.x,\n                  normalPosY = pair.activeContacts[0].vertex.y;\n\n              if (pair.activeContacts.length === 2) {\n                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n              }\n\n              if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n              } else {\n                c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n              }\n\n              c.lineTo(normalPosX, normalPosY);\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method separations\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.separations = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render separations\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n            var k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n            k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method inspector\n         * @param {inspector} inspector\n         * @param {RenderingContext} context\n         */\n\n\n        Render.inspector = function (inspector, context) {\n          var engine = inspector.engine,\n              selected = inspector.selected,\n              render = inspector.render,\n              options = render.options,\n              bounds;\n\n          if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n          }\n\n          for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1, 2]);\n\n            switch (item.type) {\n              case 'body':\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n                break;\n\n              case 'constraint':\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA) point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n                break;\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n          } // render selection region\n\n\n          if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n          }\n\n          if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n        };\n        /**\n         * Updates render timing.\n         * @method _updateTiming\n         * @private\n         * @param {render} render\n         * @param {number} time\n         */\n\n\n        var _updateTiming = function (render, time) {\n          var engine = render.engine,\n              timing = render.timing,\n              historySize = timing.historySize,\n              timestamp = engine.timing.timestamp;\n          timing.delta = time - timing.lastTime || Render._goodDelta;\n          timing.lastTime = time;\n          timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n          timing.lastTimestamp = timestamp;\n          timing.deltaHistory.unshift(timing.delta);\n          timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n          timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n          timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n          timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n          timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n          timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n          timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n          timing.elapsedHistory.unshift(timing.lastElapsed);\n          timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n        };\n        /**\n         * Returns the mean value of the given numbers.\n         * @method _mean\n         * @private\n         * @param {Number[]} values\n         * @return {Number} the mean of given values\n         */\n\n\n        var _mean = function (values) {\n          var result = 0;\n\n          for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n          }\n\n          return result / values.length || 0;\n        };\n        /**\n         * @method _createCanvas\n         * @private\n         * @param {} width\n         * @param {} height\n         * @return canvas\n         */\n\n\n        var _createCanvas = function (width, height) {\n          var canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n\n          canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          canvas.onselectstart = function () {\n            return false;\n          };\n\n          return canvas;\n        };\n        /**\n         * Gets the pixel ratio of the canvas.\n         * @method _getPixelRatio\n         * @private\n         * @param {HTMLElement} canvas\n         * @return {Number} pixel ratio\n         */\n\n\n        var _getPixelRatio = function (canvas) {\n          var context = canvas.getContext('2d'),\n              devicePixelRatio = window.devicePixelRatio || 1,\n              backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n          return devicePixelRatio / backingStorePixelRatio;\n        };\n        /**\n         * Gets the requested texture (an Image) via its path\n         * @method _getTexture\n         * @private\n         * @param {render} render\n         * @param {string} imagePath\n         * @return {Image} texture\n         */\n\n\n        var _getTexture = function (render, imagePath) {\n          var image = render.textures[imagePath];\n          if (image) return image;\n          image = render.textures[imagePath] = new Image();\n          image.src = imagePath;\n          return image;\n        };\n        /**\n         * Applies the background to the canvas using CSS.\n         * @method applyBackground\n         * @private\n         * @param {render} render\n         * @param {string} background\n         */\n\n\n        var _applyBackground = function (render, background) {\n          var cssBackground = background;\n          if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n          render.canvas.style.background = cssBackground;\n          render.canvas.style.backgroundSize = \"contain\";\n          render.currentBackground = background;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A back-reference to the `Matter.Render` module.\n         *\n         * @property controller\n         * @type render\n         */\n\n        /**\n         * A reference to the `Matter.Engine` instance to be used.\n         *\n         * @property engine\n         * @type engine\n         */\n\n        /**\n         * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n         *\n         * @property element\n         * @type HTMLElement\n         * @default null\n         */\n\n        /**\n         * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n         *\n         * @property canvas\n         * @type HTMLCanvasElement\n         * @default null\n         */\n\n        /**\n         * A `Bounds` object that specifies the drawing view region.\n         * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n         * This allows for creating views that can pan or zoom around the scene.\n         * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n        /**\n         * The 2d rendering context from the `render.canvas` element.\n         *\n         * @property context\n         * @type CanvasRenderingContext2D\n         */\n\n        /**\n         * The sprite texture cache.\n         *\n         * @property textures\n         * @type {}\n         */\n\n        /**\n         * The mouse to render if `render.options.showMousePosition` is enabled.\n         *\n         * @property mouse\n         * @type mouse\n         * @default null\n         */\n\n        /**\n         * The configuration options of the renderer.\n         *\n         * @property options\n         * @type {}\n         */\n\n        /**\n         * The target width in pixels of the `render.canvas` to be created.\n         * See also the `options.pixelRatio` property to change render quality.\n         *\n         * @property options.width\n         * @type number\n         * @default 800\n         */\n\n        /**\n         * The target height in pixels of the `render.canvas` to be created.\n         * See also the `options.pixelRatio` property to change render quality.\n         *\n         * @property options.height\n         * @type number\n         * @default 600\n         */\n\n        /**\n         * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n         *\n         * @property options.pixelRatio\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A CSS background color string to use when `render.options.wireframes` is disabled.\n         * This may be also set to `'transparent'` or equivalent.\n         *\n         * @property options.background\n         * @type string\n         * @default '#14151f'\n         */\n\n        /**\n         * A CSS background color string to use when `render.options.wireframes` is enabled.\n         * This may be also set to `'transparent'` or equivalent.\n         *\n         * @property options.wireframeBackground\n         * @type string\n         * @default '#14151f'\n         */\n\n        /**\n         * A flag that specifies if `render.bounds` should be used when rendering.\n         *\n         * @property options.hasBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable all debug information overlays together.  \n         * This includes and has priority over the values of:\n         *\n         * - `render.options.showStats`\n         * - `render.options.showPerformance`\n         *\n         * @property options.showDebug\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the engine stats info overlay.  \n         * From left to right, the values shown are:\n         *\n         * - body parts total\n         * - body total\n         * - constraints total\n         * - composites total\n         * - collision pairs total\n         *\n         * @property options.showStats\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable performance charts.  \n         * From left to right, the values shown are:\n         *\n         * - average render frequency (e.g. 60 fps)\n         * - exact engine delta time used for last update (e.g. 16.66ms)\n         * - average engine execution duration (e.g. 5.00ms)\n         * - average render execution duration (e.g. 0.40ms)\n         * - average effective play speed (e.g. '1.00x' is 'real-time')\n         *\n         * Each value is recorded over a fixed sample of past frames (60 frames).\n         *\n         * A chart shown below each value indicates the variance from the average over the sample.\n         * The more stable or fixed the value is the flatter the chart will appear.\n         *\n         * @property options.showPerformance\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable rendering entirely.\n         *\n         * @property options.enabled\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n         *\n         * @property options.wireframes\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A flag to enable or disable sleeping bodies indicators.\n         *\n         * @property options.showSleeping\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A flag to enable or disable the debug information overlay.\n         *\n         * @property options.showDebug\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the collision broadphase debug overlay.\n         *\n         * @deprecated no longer implemented\n         * @property options.showBroadphase\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body bounds debug overlay.\n         *\n         * @property options.showBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body velocity debug overlay.\n         *\n         * @property options.showVelocity\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body collisions debug overlay.\n         *\n         * @property options.showCollisions\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the collision resolver separations debug overlay.\n         *\n         * @property options.showSeparations\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body axes debug overlay.\n         *\n         * @property options.showAxes\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body positions debug overlay.\n         *\n         * @property options.showPositions\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body angle debug overlay.\n         *\n         * @property options.showAngleIndicator\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body and part ids debug overlay.\n         *\n         * @property options.showIds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body vertex numbers debug overlay.\n         *\n         * @property options.showVertexNumbers\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body convex hulls debug overlay.\n         *\n         * @property options.showConvexHulls\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the body internal edges debug overlay.\n         *\n         * @property options.showInternalEdges\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag to enable or disable the mouse position debug overlay.\n         *\n         * @property options.showMousePosition\n         * @type boolean\n         * @default false\n         */\n\n      })();\n      /***/\n\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n      *\n      * @class Contact\n      */\n      var Contact = {};\n      module.exports = Contact;\n\n      (function () {\n        /**\n         * Creates a new contact.\n         * @method create\n         * @param {vertex} vertex\n         * @return {contact} A new contact\n         */\n        Contact.create = function (vertex) {\n          return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n          };\n        };\n      })();\n      /***/\n\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Engine` module contains methods for creating and manipulating engines.\n      * An engine is a controller that manages updating the simulation of the world.\n      * See `Matter.Runner` for an optional game loop utility.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Engine\n      */\n      var Engine = {};\n      module.exports = Engine;\n\n      var Sleeping = __webpack_require__(7);\n\n      var Resolver = __webpack_require__(19);\n\n      var Detector = __webpack_require__(14);\n\n      var Pairs = __webpack_require__(20);\n\n      var Events = __webpack_require__(4);\n\n      var Composite = __webpack_require__(5);\n\n      var Constraint = __webpack_require__(10);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      (function () {\n        /**\n         * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {engine} engine\n         */\n        Engine.create = function (options) {\n          options = options || {};\n          var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n              x: 0,\n              y: 1,\n              scale: 0.001\n            },\n            timing: {\n              timestamp: 0,\n              timeScale: 1,\n              lastDelta: 0,\n              lastElapsed: 0\n            }\n          };\n          var engine = Common.extend(defaults, options);\n          engine.world = options.world || Composite.create({\n            label: 'World'\n          });\n          engine.pairs = options.pairs || Pairs.create();\n          engine.detector = options.detector || Detector.create(); // for temporary back compatibility only\n\n          engine.grid = {\n            buckets: []\n          };\n          engine.world.gravity = engine.gravity;\n          engine.broadphase = engine.grid;\n          engine.metrics = {};\n          return engine;\n        };\n        /**\n         * Moves the simulation forward in time by `delta` ms.\n         * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n         * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n         * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n         * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n         * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n         *\n         * Triggers `beforeUpdate` and `afterUpdate` events.\n         * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n         * @method update\n         * @param {engine} engine\n         * @param {number} [delta=16.666]\n         * @param {number} [correction=1]\n         */\n\n\n        Engine.update = function (engine, delta, correction) {\n          var startTime = Common.now();\n          delta = delta || 1000 / 60;\n          correction = correction || 1;\n          var world = engine.world,\n              detector = engine.detector,\n              pairs = engine.pairs,\n              timing = engine.timing,\n              timestamp = timing.timestamp,\n              i; // increment timestamp\n\n          timing.timestamp += delta * timing.timeScale;\n          timing.lastDelta = delta * timing.timeScale; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(engine, 'beforeUpdate', event); // get all bodies and all constraints in the world\n\n          var allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world); // update the detector bodies if they have changed\n\n          if (world.isModified) {\n            Detector.setBodies(detector, allBodies);\n          } // reset all composite modified flags\n\n\n          if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n          } // update sleeping if enabled\n\n\n          if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale); // apply gravity to all bodies\n\n          Engine._bodiesApplyGravity(allBodies, engine.gravity); // update all body position and rotation by integration\n\n\n          Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds); // update all constraints (first pass)\n\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // find all collisions\n\n          detector.pairs = engine.pairs;\n          var collisions = Detector.collisions(detector); // update collision pairs\n\n          Pairs.update(pairs, collisions, timestamp); // wake up bodies involved in collisions\n\n          if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale); // trigger collision events\n\n          if (pairs.collisionStart.length > 0) Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart\n          }); // iteratively resolve position between collisions\n\n          Resolver.preSolvePosition(pairs.list);\n\n          for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n          }\n\n          Resolver.postSolvePosition(allBodies); // update all constraints (second pass)\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // iteratively resolve velocity between collisions\n\n          Resolver.preSolveVelocity(pairs.list);\n\n          for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n          } // trigger collision events\n\n\n          if (pairs.collisionActive.length > 0) Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive\n          });\n          if (pairs.collisionEnd.length > 0) Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd\n          }); // clear force buffers\n\n          Engine._bodiesClearForces(allBodies);\n\n          Events.trigger(engine, 'afterUpdate', event); // log the time elapsed computing this update\n\n          engine.timing.lastElapsed = Common.now() - startTime;\n          return engine;\n        };\n        /**\n         * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n         * @method merge\n         * @param {engine} engineA\n         * @param {engine} engineB\n         */\n\n\n        Engine.merge = function (engineA, engineB) {\n          Common.extend(engineA, engineB);\n\n          if (engineB.world) {\n            engineA.world = engineB.world;\n            Engine.clear(engineA);\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              Sleeping.set(body, false);\n              body.id = Common.nextId();\n            }\n          }\n        };\n        /**\n         * Clears the engine pairs and detector.\n         * @method clear\n         * @param {engine} engine\n         */\n\n\n        Engine.clear = function (engine) {\n          Pairs.clear(engine.pairs);\n          Detector.clear(engine.detector);\n        };\n        /**\n         * Zeroes the `body.force` and `body.torque` force buffers.\n         * @method _bodiesClearForces\n         * @private\n         * @param {body[]} bodies\n         */\n\n\n        Engine._bodiesClearForces = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset force buffers\n\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n          }\n        };\n        /**\n         * Applys a mass dependant force to all given bodies.\n         * @method _bodiesApplyGravity\n         * @private\n         * @param {body[]} bodies\n         * @param {vector} gravity\n         */\n\n\n        Engine._bodiesApplyGravity = function (bodies, gravity) {\n          var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n          if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n            return;\n          }\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue; // apply gravity\n\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n          }\n        };\n        /**\n         * Applys `Body.update` to all given `bodies`.\n         * @method _bodiesUpdate\n         * @private\n         * @param {body[]} bodies\n         * @param {number} deltaTime \n         * The amount of time elapsed between updates\n         * @param {number} timeScale\n         * @param {number} correction \n         * The Verlet correction factor (deltaTime / lastDeltaTime)\n         * @param {bounds} worldBounds\n         */\n\n\n        Engine._bodiesUpdate = function (bodies, deltaTime, timeScale, correction, worldBounds) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue;\n            Body.update(body, deltaTime, timeScale, correction);\n          }\n        };\n        /**\n         * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n         * @deprecated use Matter.Runner.run(engine) instead\n         * @method run\n         * @param {engine} engine\n         */\n\n        /**\n        * Fired just before an update\n        *\n        * @event beforeUpdate\n        * @param {object} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update and all collision events\n        *\n        * @event afterUpdate\n        * @param {object} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n        *\n        * @event collisionStart\n        * @param {object} event An event object\n        * @param {pair[]} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n        *\n        * @event collisionActive\n        * @param {object} event An event object\n        * @param {pair[]} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n        *\n        * @event collisionEnd\n        * @param {object} event An event object\n        * @param {pair[]} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {engine} event.source The source object of the event\n        * @param {string} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` that specifies the number of position iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property positionIterations\n         * @type number\n         * @default 6\n         */\n\n        /**\n         * An integer `Number` that specifies the number of velocity iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property velocityIterations\n         * @type number\n         * @default 4\n         */\n\n        /**\n         * An integer `Number` that specifies the number of constraint iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         * The default value of `2` is usually very adequate.\n         *\n         * @property constraintIterations\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n         * Sleeping can improve stability and performance, but often at the expense of accuracy.\n         *\n         * @property enableSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * An `Object` containing properties regarding the timing systems of the engine. \n         *\n         * @property timing\n         * @type object\n         */\n\n        /**\n         * A `Number` that specifies the global scaling factor of time for all bodies.\n         * A value of `0` freezes the simulation.\n         * A value of `0.1` gives a slow-motion effect.\n         * A value of `1.2` gives a speed-up effect.\n         *\n         * @property timing.timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n         * It is incremented on every `Engine.update` by the given `delta` argument. \n         *\n         * @property timing.timestamp\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n         * It is updated by timing from the start of the last `Engine.update` call until it ends.\n         *\n         * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n         *\n         * @property timing.lastElapsed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that represents the `delta` value used in the last engine update.\n         *\n         * @property timing.lastDelta\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Matter.Detector` instance.\n         *\n         * @property detector\n         * @type detector\n         * @default a Matter.Detector instance\n         */\n\n        /**\n         * A `Matter.Grid` instance.\n         *\n         * @deprecated replaced by `engine.detector`\n         * @property grid\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * Replaced by and now alias for `engine.grid`.\n         *\n         * @deprecated replaced by `engine.detector`\n         * @property broadphase\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n         *\n         * @property world\n         * @type composite\n         * @default a Matter.Composite instance\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * The gravity to apply on all bodies in `engine.world`.\n         *\n         * @property gravity\n         * @type object\n         */\n\n        /**\n         * The gravity x component.\n         *\n         * @property gravity.x\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * The gravity y component.\n         *\n         * @property gravity.y\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * The gravity scale factor.\n         *\n         * @property gravity.scale\n         * @type object\n         * @default 0.001\n         */\n\n      })();\n      /***/\n\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Resolver` module contains methods for resolving collision pairs.\n      *\n      * @class Resolver\n      */\n      var Resolver = {};\n      module.exports = Resolver;\n\n      var Vertices = __webpack_require__(3);\n\n      var Bounds = __webpack_require__(1);\n\n      (function () {\n        Resolver._restingThresh = 4;\n        Resolver._restingThreshTangent = 6;\n        Resolver._positionDampen = 0.9;\n        Resolver._positionWarming = 0.8;\n        Resolver._frictionNormalMultiplier = 5;\n        /**\n         * Prepare pairs for position solving.\n         * @method preSolvePosition\n         * @param {pair[]} pairs\n         */\n\n        Resolver.preSolvePosition = function (pairs) {\n          var i,\n              pair,\n              activeCount,\n              pairsLength = pairs.length; // find total contacts on each body\n\n          for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n          }\n        };\n        /**\n         * Find a solution for pair positions.\n         * @method solvePosition\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solvePosition = function (pairs, timeScale) {\n          var i,\n              pair,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              contactShare,\n              positionImpulse,\n              positionDampen = Resolver._positionDampen,\n              pairsLength = pairs.length; // find impulses required to resolve penetration\n\n          for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal; // get current separation between body edges involved in collision\n\n            pair.separation = normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x) + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n          }\n\n          for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n            if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              contactShare = positionDampen / bodyA.totalContacts;\n              bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n              bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              contactShare = positionDampen / bodyB.totalContacts;\n              bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n              bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n          }\n        };\n        /**\n         * Apply position resolution.\n         * @method postSolvePosition\n         * @param {body[]} bodies\n         */\n\n\n        Resolver.postSolvePosition = function (bodies) {\n          var positionWarming = Resolver._positionWarming,\n              bodiesLength = bodies.length,\n              verticesTranslate = Vertices.translate,\n              boundsUpdate = Bounds.update;\n\n          for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity; // reset contact count\n\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n              // update body geometry\n              for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                verticesTranslate(part.vertices, positionImpulse);\n                boundsUpdate(part.bounds, part.vertices, velocity);\n                part.position.x += positionImpulseX;\n                part.position.y += positionImpulseY;\n              } // move the body without changing velocity\n\n\n              body.positionPrev.x += positionImpulseX;\n              body.positionPrev.y += positionImpulseY;\n\n              if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                // reset cached impulse if the body has velocity along it\n                positionImpulse.x = 0;\n                positionImpulse.y = 0;\n              } else {\n                // warm the next iteration\n                positionImpulse.x *= positionWarming;\n                positionImpulse.y *= positionWarming;\n              }\n            }\n          }\n        };\n        /**\n         * Prepare pairs for velocity solving.\n         * @method preSolveVelocity\n         * @param {pair[]} pairs\n         */\n\n\n        Resolver.preSolveVelocity = function (pairs) {\n          var pairsLength = pairs.length,\n              i,\n              j;\n\n          for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent; // resolve each contact\n\n            for (j = 0; j < contactsLength; j++) {\n              var contact = contacts[j],\n                  contactVertex = contact.vertex,\n                  normalImpulse = contact.normalImpulse,\n                  tangentImpulse = contact.tangentImpulse;\n\n              if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                // total impulse from contact\n                var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                    impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                  bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                  bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                  bodyA.anglePrev += bodyA.inverseInertia * ((contactVertex.x - bodyA.position.x) * impulseY - (contactVertex.y - bodyA.position.y) * impulseX);\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                  bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                  bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                  bodyB.anglePrev -= bodyB.inverseInertia * ((contactVertex.x - bodyB.position.x) * impulseY - (contactVertex.y - bodyB.position.y) * impulseX);\n                }\n              }\n            }\n          }\n        };\n        /**\n         * Find a solution for pair velocities.\n         * @method solveVelocity\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solveVelocity = function (pairs, timeScale) {\n          var timeScaleSquared = timeScale * timeScale,\n              restingThresh = Resolver._restingThresh * timeScaleSquared,\n              frictionNormalMultiplier = Resolver._frictionNormalMultiplier,\n              restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared,\n              NumberMaxValue = Number.MAX_VALUE,\n              pairsLength = pairs.length,\n              tangentImpulse,\n              maxFriction,\n              i,\n              j;\n\n          for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared; // update body velocities\n\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev; // resolve each contact\n\n            for (j = 0; j < contactsLength; j++) {\n              var contact = contacts[j],\n                  contactVertex = contact.vertex;\n              var offsetAX = contactVertex.x - bodyA.position.x,\n                  offsetAY = contactVertex.y - bodyA.position.y,\n                  offsetBX = contactVertex.x - bodyB.position.x,\n                  offsetBY = contactVertex.y - bodyB.position.y;\n              var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                  velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                  velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                  velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n              var relativeVelocityX = velocityPointAX - velocityPointBX,\n                  relativeVelocityY = velocityPointAY - velocityPointBY;\n              var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                  tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY; // coulomb friction\n\n              var normalOverlap = pair.separation + normalVelocity;\n              var normalForce = Math.min(normalOverlap, 1);\n              normalForce = normalOverlap < 0 ? 0 : normalForce;\n              var frictionLimit = normalForce * friction;\n\n              if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n\n                if (tangentImpulse < -maxFriction) {\n                  tangentImpulse = -maxFriction;\n                } else if (tangentImpulse > maxFriction) {\n                  tangentImpulse = maxFriction;\n                }\n              } else {\n                tangentImpulse = tangentVelocity;\n                maxFriction = NumberMaxValue;\n              } // account for mass, inertia and contact offset\n\n\n              var oAcN = offsetAX * normalY - offsetAY * normalX,\n                  oBcN = offsetBX * normalY - offsetBY * normalX,\n                  share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN); // raw impulses\n\n              var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n              tangentImpulse *= share; // handle high velocity and resting collisions separately\n\n              if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) {\n                // high normal velocity so clear cached contact normal impulse\n                contact.normalImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // impulse constraint tends to 0\n                var contactNormalImpulse = contact.normalImpulse;\n                contact.normalImpulse += normalImpulse;\n                contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n              } // handle high velocity and resting collisions separately\n\n\n              if (tangentVelocity * tangentVelocity > restingThreshTangent) {\n                // high tangent velocity so clear cached contact tangent impulse\n                contact.tangentImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                var contactTangentImpulse = contact.tangentImpulse;\n                contact.tangentImpulse += tangentImpulse;\n                if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n              } // total impulse from contact\n\n\n              var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                  impulseY = normalY * normalImpulse + tangentY * tangentImpulse; // apply impulse from contact\n\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n              }\n\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n              }\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n      *\n      * @class Pairs\n      */\n      var Pairs = {};\n      module.exports = Pairs;\n\n      var Pair = __webpack_require__(9);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new pairs structure.\n         * @method create\n         * @param {object} options\n         * @return {pairs} A new pairs structure\n         */\n        Pairs.create = function (options) {\n          return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n          }, options);\n        };\n        /**\n         * Updates pairs given a list of collisions.\n         * @method update\n         * @param {object} pairs\n         * @param {collision[]} collisions\n         * @param {number} timestamp\n         */\n\n\n        Pairs.update = function (pairs, collisions, timestamp) {\n          var pairsList = pairs.list,\n              pairsListLength = pairsList.length,\n              pairsTable = pairs.table,\n              collisionsLength = collisions.length,\n              collisionStart = pairs.collisionStart,\n              collisionEnd = pairs.collisionEnd,\n              collisionActive = pairs.collisionActive,\n              collision,\n              pairIndex,\n              pair,\n              i; // clear collision state arrays, but maintain old reference\n\n          collisionStart.length = 0;\n          collisionEnd.length = 0;\n          collisionActive.length = 0;\n\n          for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n          }\n\n          for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n              // pair already exists (but may or may not be active)\n              if (pair.isActive) {\n                // pair exists and is active\n                collisionActive.push(pair);\n              } else {\n                // pair exists but was inactive, so a collision has just started again\n                collisionStart.push(pair);\n              } // update the pair\n\n\n              Pair.update(pair, collision, timestamp);\n              pair.confirmedActive = true;\n            } else {\n              // pair did not exist, create a new pair\n              pair = Pair.create(collision, timestamp);\n              pairsTable[pair.id] = pair; // push the new pair\n\n              collisionStart.push(pair);\n              pairsList.push(pair);\n            }\n          } // find pairs that are no longer active\n\n\n          var removePairIndex = [];\n          pairsListLength = pairsList.length;\n\n          for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n\n            if (!pair.confirmedActive) {\n              Pair.setActive(pair, false, timestamp);\n              collisionEnd.push(pair);\n\n              if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                removePairIndex.push(i);\n              }\n            }\n          } // remove inactive pairs\n\n\n          for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n          }\n        };\n        /**\n         * Clears the given pairs structure.\n         * @method clear\n         * @param {pairs} pairs\n         * @return {pairs} pairs\n         */\n\n\n        Pairs.clear = function (pairs) {\n          pairs.table = {};\n          pairs.list.length = 0;\n          pairs.collisionStart.length = 0;\n          pairs.collisionActive.length = 0;\n          pairs.collisionEnd.length = 0;\n          return pairs;\n        };\n      })();\n      /***/\n\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var Matter = module.exports = __webpack_require__(22);\n\n      Matter.Axes = __webpack_require__(11);\n      Matter.Bodies = __webpack_require__(12);\n      Matter.Body = __webpack_require__(6);\n      Matter.Bounds = __webpack_require__(1);\n      Matter.Collision = __webpack_require__(8);\n      Matter.Common = __webpack_require__(0);\n      Matter.Composite = __webpack_require__(5);\n      Matter.Composites = __webpack_require__(23);\n      Matter.Constraint = __webpack_require__(10);\n      Matter.Contact = __webpack_require__(17);\n      Matter.Detector = __webpack_require__(14);\n      Matter.Engine = __webpack_require__(18);\n      Matter.Events = __webpack_require__(4);\n      Matter.Grid = __webpack_require__(24);\n      Matter.Mouse = __webpack_require__(13);\n      Matter.MouseConstraint = __webpack_require__(25);\n      Matter.Pair = __webpack_require__(9);\n      Matter.Pairs = __webpack_require__(20);\n      Matter.Plugin = __webpack_require__(15);\n      Matter.Query = __webpack_require__(26);\n      Matter.Render = __webpack_require__(16);\n      Matter.Resolver = __webpack_require__(19);\n      Matter.Runner = __webpack_require__(27);\n      Matter.SAT = __webpack_require__(28);\n      Matter.Sleeping = __webpack_require__(7);\n      Matter.Svg = __webpack_require__(29);\n      Matter.Vector = __webpack_require__(2);\n      Matter.Vertices = __webpack_require__(3);\n      Matter.World = __webpack_require__(30); // temporary back compatibility\n\n      Matter.Engine.run = Matter.Runner.run;\n      Matter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\n      /***/\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\r\n      * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n      *\r\n      * @class Matter\r\n      */\n      var Matter = {};\n      module.exports = Matter;\n\n      var Plugin = __webpack_require__(15);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\r\n         * The library name.\r\n         * @property name\r\n         * @readOnly\r\n         * @type {String}\r\n         */\n        Matter.name = 'matter-js';\n        /**\r\n         * The library version.\r\n         * @property version\r\n         * @readOnly\r\n         * @type {String}\r\n         */\n\n        Matter.version = true ? \"0.18.0\" : undefined;\n        /**\r\n         * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n         * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n         * @property uses\r\n         * @type {Array}\r\n         */\n\n        Matter.uses = [];\n        /**\r\n         * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n         * @property used\r\n         * @readOnly\r\n         * @type {Array}\r\n         */\n\n        Matter.used = [];\n        /**\r\n         * Installs the given plugins on the `Matter` namespace.\r\n         * This is a short-hand for `Plugin.use`, see it for more information.\r\n         * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n         * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n         * @method use\r\n         * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n         */\n\n        Matter.use = function () {\n          Plugin.use(Matter, Array.prototype.slice.call(arguments));\n        };\n        /**\r\n         * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n         * See also docs for `Common.chain`.\r\n         * @method before\r\n         * @param {string} path The path relative to `Matter`\r\n         * @param {function} func The function to chain before the original\r\n         * @return {function} The chained function that replaced the original\r\n         */\n\n\n        Matter.before = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathBefore(Matter, path, func);\n        };\n        /**\r\n         * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n         * See also docs for `Common.chain`.\r\n         * @method after\r\n         * @param {string} path The path relative to `Matter`\r\n         * @param {function} func The function to chain after the original\r\n         * @return {function} The chained function that replaced the original\r\n         */\n\n\n        Matter.after = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathAfter(Matter, path, func);\n        };\n      })();\n      /***/\n\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Composites` module contains factory methods for creating composite bodies\n      * with commonly used configurations (such as stacks and chains).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composites\n      */\n      var Composites = {};\n      module.exports = Composites;\n\n      var Composite = __webpack_require__(5);\n\n      var Constraint = __webpack_require__(10);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      var Bodies = __webpack_require__(12);\n\n      var deprecated = Common.deprecated;\n\n      (function () {\n        /**\n         * Create a new composite containing bodies created in the callback in a grid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method stack\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n        Composites.stack = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          var stack = Composite.create({\n            label: 'Stack'\n          }),\n              x = xx,\n              y = yy,\n              lastBody,\n              i = 0;\n\n          for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n\n            for (var column = 0; column < columns; column++) {\n              var body = callback(x, y, column, row, lastBody, i);\n\n              if (body) {\n                var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                    bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                Body.translate(body, {\n                  x: bodyWidth * 0.5,\n                  y: bodyHeight * 0.5\n                });\n                x = body.bounds.max.x + columnGap;\n                Composite.addBody(stack, body);\n                lastBody = body;\n                i += 1;\n              } else {\n                x += columnGap;\n              }\n            }\n\n            y += maxHeight + rowGap;\n            x = xx;\n          }\n\n          return stack;\n        };\n        /**\n         * Chains all bodies in the given composite together using constraints.\n         * @method chain\n         * @param {composite} composite\n         * @param {number} xOffsetA\n         * @param {number} yOffsetA\n         * @param {number} xOffsetB\n         * @param {number} yOffsetB\n         * @param {object} options\n         * @return {composite} A new composite containing objects chained together with constraints\n         */\n\n\n        Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n          var bodies = composite.bodies;\n\n          for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n            var defaults = {\n              bodyA: bodyA,\n              pointA: {\n                x: bodyAWidth * xOffsetA,\n                y: bodyAHeight * yOffsetA\n              },\n              bodyB: bodyB,\n              pointB: {\n                x: bodyBWidth * xOffsetB,\n                y: bodyBHeight * yOffsetB\n              }\n            };\n            var constraint = Common.extend(defaults, options);\n            Composite.addConstraint(composite, Constraint.create(constraint));\n          }\n\n          composite.label += ' Chain';\n          return composite;\n        };\n        /**\n         * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n         * @method mesh\n         * @param {composite} composite\n         * @param {number} columns\n         * @param {number} rows\n         * @param {boolean} crossBrace\n         * @param {object} options\n         * @return {composite} The composite containing objects meshed together with constraints\n         */\n\n\n        Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n          var bodies = composite.bodies,\n              row,\n              col,\n              bodyA,\n              bodyB,\n              bodyC;\n\n          for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n              bodyA = bodies[col - 1 + row * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n            }\n\n            if (row > 0) {\n              for (col = 0; col < columns; col++) {\n                bodyA = bodies[col + (row - 1) * columns];\n                bodyB = bodies[col + row * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyA,\n                  bodyB: bodyB\n                }, options)));\n\n                if (crossBrace && col > 0) {\n                  bodyC = bodies[col - 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n\n                if (crossBrace && col < columns - 1) {\n                  bodyC = bodies[col + 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n              }\n            }\n          }\n\n          composite.label += ' Mesh';\n          return composite;\n        };\n        /**\n         * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method pyramid\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n\n\n        Composites.pyramid = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            if (row > actualRows) return; // reverse row order\n\n            row = actualRows - row;\n            var start = row,\n                end = columns - 1 - row;\n            if (column < start || column > end) return; // retroactively fix the first body's position, since width was unknown\n\n            if (i === 1) {\n              Body.translate(lastBody, {\n                x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                y: 0\n              });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n          });\n        };\n        /**\n         * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n         * @deprecated moved to newtonsCradle example\n         * @method newtonsCradle\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} number\n         * @param {number} size\n         * @param {number} length\n         * @return {composite} A new composite newtonsCradle body\n         */\n\n\n        Composites.newtonsCradle = function (xx, yy, number, size, length) {\n          var newtonsCradle = Composite.create({\n            label: 'Newtons Cradle'\n          });\n\n          for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {\n              inertia: Infinity,\n              restitution: 1,\n              friction: 0,\n              frictionAir: 0.0001,\n              slop: 1\n            }),\n                constraint = Constraint.create({\n              pointA: {\n                x: xx + i * (size * separation),\n                y: yy\n              },\n              bodyB: circle\n            });\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n          }\n\n          return newtonsCradle;\n        };\n\n        deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n        /**\n         * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n         * @deprecated moved to car example\n         * @method car\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} width\n         * @param {number} height\n         * @param {number} wheelSize\n         * @return {composite} A new composite car body\n         */\n\n        Composites.car = function (xx, yy, width, height, wheelSize) {\n          var group = Body.nextGroup(true),\n              wheelBase = 20,\n              wheelAOffset = -width * 0.5 + wheelBase,\n              wheelBOffset = width * 0.5 - wheelBase,\n              wheelYOffset = 0;\n          var car = Composite.create({\n            label: 'Car'\n          }),\n              body = Bodies.rectangle(xx, yy, width, height, {\n            collisionFilter: {\n              group: group\n            },\n            chamfer: {\n              radius: height * 0.5\n            },\n            density: 0.0002\n          });\n          var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var axelA = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelAOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n          });\n          var axelB = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelBOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n          });\n          Composite.addBody(car, body);\n          Composite.addBody(car, wheelA);\n          Composite.addBody(car, wheelB);\n          Composite.addConstraint(car, axelA);\n          Composite.addConstraint(car, axelB);\n          return car;\n        };\n\n        deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n        /**\n         * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n         * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n         * @deprecated moved to softBody and cloth examples\n         * @method softBody\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {boolean} crossBrace\n         * @param {number} particleRadius\n         * @param {} particleOptions\n         * @param {} constraintOptions\n         * @return {composite} A new composite softBody\n         */\n\n        Composites.softBody = function (xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n          particleOptions = Common.extend({\n            inertia: Infinity\n          }, particleOptions);\n          constraintOptions = Common.extend({\n            stiffness: 0.2,\n            render: {\n              type: 'line',\n              anchors: false\n            }\n          }, constraintOptions);\n          var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n          });\n          Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n          softBody.label = 'Soft Body';\n          return softBody;\n        };\n\n        deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n      })();\n      /***/\n\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * This module has now been replaced by `Matter.Detector`.\n      *\n      * All usage should be migrated to `Matter.Detector` or another alternative.\n      * For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n      *\n      * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n      *\n      * @class Grid\n      * @deprecated\n      */\n      var Grid = {};\n      module.exports = Grid;\n\n      var Pair = __webpack_require__(9);\n\n      var Common = __webpack_require__(0);\n\n      var deprecated = Common.deprecated;\n\n      (function () {\n        /**\n         * Creates a new grid.\n         * @deprecated replaced by Matter.Detector\n         * @method create\n         * @param {} options\n         * @return {grid} A new grid\n         */\n        Grid.create = function (options) {\n          var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n          };\n          return Common.extend(defaults, options);\n        };\n        /**\n         * The width of a single grid bucket.\n         *\n         * @property bucketWidth\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * The height of a single grid bucket.\n         *\n         * @property bucketHeight\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * Updates the grid.\n         * @deprecated replaced by Matter.Detector\n         * @method update\n         * @param {grid} grid\n         * @param {body[]} bodies\n         * @param {engine} engine\n         * @param {boolean} forceUpdate\n         */\n\n\n        Grid.update = function (grid, bodies, engine, forceUpdate) {\n          var i,\n              col,\n              row,\n              world = engine.world,\n              buckets = grid.buckets,\n              bucket,\n              bucketId,\n              gridChanged = false;\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isSleeping && !forceUpdate) continue; // temporary back compatibility bounds check\n\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)) continue;\n\n            var newRegion = Grid._getRegion(grid, body); // if the body has changed grid region\n\n\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n              if (!body.region || forceUpdate) body.region = newRegion;\n\n              var union = Grid._regionUnion(newRegion, body.region); // update grid buckets affected by region change\n              // iterate over the union of both regions\n\n\n              for (col = union.startCol; col <= union.endCol; col++) {\n                for (row = union.startRow; row <= union.endRow; row++) {\n                  bucketId = Grid._getBucketId(col, row);\n                  bucket = buckets[bucketId];\n                  var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                  var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow; // remove from old region buckets\n\n                  if (!isInsideNewRegion && isInsideOldRegion) {\n                    if (isInsideOldRegion) {\n                      if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                    }\n                  } // add to new region buckets\n\n\n                  if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n\n                    Grid._bucketAddBody(grid, bucket, body);\n                  }\n                }\n              } // set the new region\n\n\n              body.region = newRegion; // flag changes so we can update pairs\n\n              gridChanged = true;\n            }\n          } // update pairs list only if pairs changed (i.e. a body changed region)\n\n\n          if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n        };\n\n        deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n        /**\n         * Clears the grid.\n         * @deprecated replaced by Matter.Detector\n         * @method clear\n         * @param {grid} grid\n         */\n\n        Grid.clear = function (grid) {\n          grid.buckets = {};\n          grid.pairs = {};\n          grid.pairsList = [];\n        };\n\n        deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n        /**\n         * Finds the union of two regions.\n         * @method _regionUnion\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} regionA\n         * @param {} regionB\n         * @return {} region\n         */\n\n        Grid._regionUnion = function (regionA, regionB) {\n          var startCol = Math.min(regionA.startCol, regionB.startCol),\n              endCol = Math.max(regionA.endCol, regionB.endCol),\n              startRow = Math.min(regionA.startRow, regionB.startRow),\n              endRow = Math.max(regionA.endRow, regionB.endRow);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Gets the region a given body falls in for a given grid.\n         * @method _getRegion\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} grid\n         * @param {} body\n         * @return {} region\n         */\n\n\n        Grid._getRegion = function (grid, body) {\n          var bounds = body.bounds,\n              startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n              endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n              startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n              endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Creates a region.\n         * @method _createRegion\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} startCol\n         * @param {} endCol\n         * @param {} startRow\n         * @param {} endRow\n         * @return {} region\n         */\n\n\n        Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n          return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n          };\n        };\n        /**\n         * Gets the bucket id at the given position.\n         * @method _getBucketId\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} column\n         * @param {} row\n         * @return {string} bucket id\n         */\n\n\n        Grid._getBucketId = function (column, row) {\n          return 'C' + column + 'R' + row;\n        };\n        /**\n         * Creates a bucket.\n         * @method _createBucket\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} buckets\n         * @param {} bucketId\n         * @return {} bucket\n         */\n\n\n        Grid._createBucket = function (buckets, bucketId) {\n          var bucket = buckets[bucketId] = [];\n          return bucket;\n        };\n        /**\n         * Adds a body to a bucket.\n         * @method _bucketAddBody\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketAddBody = function (grid, bucket, body) {\n          var gridPairs = grid.pairs,\n              pairId = Pair.id,\n              bucketLength = bucket.length,\n              i; // add new pairs\n\n          for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n            if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue; // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n              pair[2] += 1;\n            } else {\n              gridPairs[id] = [body, bodyB, 1];\n            }\n          } // add to bodies (after pairs, otherwise pairs with self)\n\n\n          bucket.push(body);\n        };\n        /**\n         * Removes a body from a bucket.\n         * @method _bucketRemoveBody\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketRemoveBody = function (grid, bucket, body) {\n          var gridPairs = grid.pairs,\n              pairId = Pair.id,\n              i; // remove from bucket\n\n          bucket.splice(Common.indexOf(bucket, body), 1);\n          var bucketLength = bucket.length; // update pair counts\n\n          for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n            if (pair) pair[2] -= 1;\n          }\n        };\n        /**\n         * Generates a list of the active pairs in the grid.\n         * @method _createActivePairsList\n         * @deprecated replaced by Matter.Detector\n         * @private\n         * @param {} grid\n         * @return [] pairs\n         */\n\n\n        Grid._createActivePairsList = function (grid) {\n          var pair,\n              gridPairs = grid.pairs,\n              pairKeys = Common.keys(gridPairs),\n              pairKeysLength = pairKeys.length,\n              pairs = [],\n              k; // iterate over grid.pairs\n\n          for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]]; // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n\n            if (pair[2] > 0) {\n              pairs.push(pair);\n            } else {\n              delete gridPairs[pairKeys[k]];\n            }\n          }\n\n          return pairs;\n        };\n      })();\n      /***/\n\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n      * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class MouseConstraint\n      */\n      var MouseConstraint = {};\n      module.exports = MouseConstraint;\n\n      var Vertices = __webpack_require__(3);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Mouse = __webpack_require__(13);\n\n      var Events = __webpack_require__(4);\n\n      var Detector = __webpack_require__(14);\n\n      var Constraint = __webpack_require__(10);\n\n      var Composite = __webpack_require__(5);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      (function () {\n        /**\n         * Creates a new mouse constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {engine} engine\n         * @param {} options\n         * @return {MouseConstraint} A new MouseConstraint\n         */\n        MouseConstraint.create = function (engine, options) {\n          var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n          if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n              mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n              mouse = Mouse.create(options.element);\n            } else {\n              mouse = Mouse.create();\n              Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n          }\n\n          var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: {\n              x: 0,\n              y: 0\n            },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n              strokeStyle: '#90EE90',\n              lineWidth: 3\n            }\n          });\n          var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            }\n          };\n          var mouseConstraint = Common.extend(defaults, options);\n          Events.on(engine, 'beforeUpdate', function () {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n\n            MouseConstraint._triggerEvents(mouseConstraint);\n          });\n          return mouseConstraint;\n        };\n        /**\n         * Updates the given mouse constraint.\n         * @private\n         * @method update\n         * @param {MouseConstraint} mouseConstraint\n         * @param {body[]} bodies\n         */\n\n\n        MouseConstraint.update = function (mouseConstraint, bodies) {\n          var mouse = mouseConstraint.mouse,\n              constraint = mouseConstraint.constraint,\n              body = mouseConstraint.body;\n\n          if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n              for (var i = 0; i < bodies.length; i++) {\n                body = bodies[i];\n\n                if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                  for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Vertices.contains(part.vertices, mouse.position)) {\n                      constraint.pointA = mouse.position;\n                      constraint.bodyB = mouseConstraint.body = body;\n                      constraint.pointB = {\n                        x: mouse.position.x - body.position.x,\n                        y: mouse.position.y - body.position.y\n                      };\n                      constraint.angleB = body.angle;\n                      Sleeping.set(body, false);\n                      Events.trigger(mouseConstraint, 'startdrag', {\n                        mouse: mouse,\n                        body: body\n                      });\n                      break;\n                    }\n                  }\n                }\n              }\n            } else {\n              Sleeping.set(constraint.bodyB, false);\n              constraint.pointA = mouse.position;\n            }\n          } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n            if (body) Events.trigger(mouseConstraint, 'enddrag', {\n              mouse: mouse,\n              body: body\n            });\n          }\n        };\n        /**\n         * Triggers mouse constraint events.\n         * @method _triggerEvents\n         * @private\n         * @param {mouse} mouseConstraint\n         */\n\n\n        MouseConstraint._triggerEvents = function (mouseConstraint) {\n          var mouse = mouseConstraint.mouse,\n              mouseEvents = mouse.sourceEvents;\n          if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n            mouse: mouse\n          });\n          if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n            mouse: mouse\n          });\n          if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n            mouse: mouse\n          }); // reset the mouse state ready for the next step\n\n          Mouse.clearSourceEvents(mouse);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when the mouse has moved (or a touch moves) during the last step\n        *\n        * @event mousemove\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is down (or a touch has started) during the last step\n        *\n        * @event mousedown\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is up (or a touch has ended) during the last step\n        *\n        * @event mouseup\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user starts dragging a body\n        *\n        * @event startdrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user ends dragging a body\n        *\n        * @event enddrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body that has stopped being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n         *\n         * @property mouse\n         * @type mouse\n         * @default mouse\n         */\n\n        /**\n         * The `Body` that is currently being moved by the user, or `null` if no body.\n         *\n         * @property body\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The `Constraint` object that is used to move the body during interaction.\n         *\n         * @property constraint\n         * @type constraint\n         */\n\n        /**\n         * An `Object` that specifies the collision filter properties.\n         * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n      })();\n      /***/\n\n    },\n    /* 26 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Query` module contains methods for performing collision queries.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Query\n      */\n      var Query = {};\n      module.exports = Query;\n\n      var Vector = __webpack_require__(2);\n\n      var Collision = __webpack_require__(8);\n\n      var Bounds = __webpack_require__(1);\n\n      var Bodies = __webpack_require__(12);\n\n      var Vertices = __webpack_require__(3);\n\n      (function () {\n        /**\n         * Returns a list of collisions between `body` and `bodies`.\n         * @method collides\n         * @param {body} body\n         * @param {body[]} bodies\n         * @return {collision[]} Collisions\n         */\n        Query.collides = function (body, bodies) {\n          var collisions = [],\n              bodiesLength = bodies.length,\n              bounds = body.bounds,\n              collides = Collision.collides,\n              overlaps = Bounds.overlaps;\n\n          for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n\n            if (overlaps(bodyA.bounds, bounds)) {\n              for (var j = partsAStart; j < partsALength; j++) {\n                var part = bodyA.parts[j];\n\n                if (overlaps(part.bounds, bounds)) {\n                  var collision = collides(part, body);\n\n                  if (collision) {\n                    collisions.push(collision);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n         * @method ray\n         * @param {body[]} bodies\n         * @param {vector} startPoint\n         * @param {vector} endPoint\n         * @param {number} [rayWidth]\n         * @return {collision[]} Collisions\n         */\n\n\n        Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n          rayWidth = rayWidth || 1e-100;\n          var rayAngle = Vector.angle(startPoint, endPoint),\n              rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n              rayX = (endPoint.x + startPoint.x) * 0.5,\n              rayY = (endPoint.y + startPoint.y) * 0.5,\n              ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n            angle: rayAngle\n          }),\n              collisions = Query.collides(ray, bodies);\n\n          for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n         * @method region\n         * @param {body[]} bodies\n         * @param {bounds} bounds\n         * @param {bool} [outside=false]\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.region = function (bodies, bounds, outside) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if (overlaps && !outside || !overlaps && outside) result.push(body);\n          }\n\n          return result;\n        };\n        /**\n         * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n         * @method point\n         * @param {body[]} bodies\n         * @param {vector} point\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.point = function (bodies, point) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (Bounds.contains(body.bounds, point)) {\n              for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                var part = body.parts[j];\n\n                if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                  result.push(body);\n                  break;\n                }\n              }\n            }\n          }\n\n          return result;\n        };\n      })();\n      /***/\n\n    },\n    /* 27 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Runner` module is an optional utility which provides a game loop, \n      * that handles continuously updating a `Matter.Engine` for you within a browser.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n      * Instead just call `Engine.update(engine, delta)` in your own loop.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Runner\n      */\n      var Runner = {};\n      module.exports = Runner;\n\n      var Events = __webpack_require__(4);\n\n      var Engine = __webpack_require__(18);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        if (!_requestAnimationFrame) {\n          var _frameTimeout;\n\n          _requestAnimationFrame = function (callback) {\n            _frameTimeout = setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = function () {\n            clearTimeout(_frameTimeout);\n          };\n        }\n        /**\n         * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * @method create\n         * @param {} options\n         */\n\n\n        Runner.create = function (options) {\n          var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n          };\n          var runner = Common.extend(defaults, options);\n          runner.delta = runner.delta || 1000 / runner.fps;\n          runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n          runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n          runner.fps = 1000 / runner.delta;\n          return runner;\n        };\n        /**\n         * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n         * @method run\n         * @param {engine} engine\n         */\n\n\n        Runner.run = function (runner, engine) {\n          // create runner if engine is first argument\n          if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n          }\n\n          (function render(time) {\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n              Runner.tick(runner, engine, time);\n            }\n          })();\n\n          return runner;\n        };\n        /**\n         * A game loop utility that updates the engine and renderer by one step (a 'tick').\n         * Features delta smoothing, time correction and fixed or dynamic timing.\n         * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n         * @method tick\n         * @param {runner} runner\n         * @param {engine} engine\n         * @param {number} time\n         */\n\n\n        Runner.tick = function (runner, engine, time) {\n          var timing = engine.timing,\n              correction = 1,\n              delta; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(runner, 'beforeTick', event);\n\n          if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n          } else {\n            // dynamic timestep based on wall clock between calls\n            delta = time - runner.timePrev || runner.delta;\n            runner.timePrev = time; // optimistically filter delta over a few frames, to improve stability\n\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory); // limit delta\n\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta; // correction for delta\n\n            correction = delta / runner.delta; // update engine timing object\n\n            runner.delta = delta;\n          } // time correction for time scaling\n\n\n          if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;\n          if (timing.timeScale === 0) correction = 0;\n          runner.timeScalePrev = timing.timeScale;\n          runner.correction = correction; // fps counter\n\n          runner.frameCounter += 1;\n\n          if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n          }\n\n          Events.trigger(runner, 'tick', event); // update\n\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, delta, correction);\n          Events.trigger(runner, 'afterUpdate', event);\n          Events.trigger(runner, 'afterTick', event);\n        };\n        /**\n         * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n         * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n         * @method stop\n         * @param {runner} runner\n         */\n\n\n        Runner.stop = function (runner) {\n          _cancelAnimationFrame(runner.frameRequestId);\n        };\n        /**\n         * Alias for `Runner.run`.\n         * @method start\n         * @param {runner} runner\n         * @param {engine} engine\n         */\n\n\n        Runner.start = function (runner, engine) {\n          Runner.run(runner, engine);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired at the start of a tick, before any updates to the engine or timing\n        *\n        * @event beforeTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine timing updated, but just before update\n        *\n        * @event tick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired at the end of a tick, after engine update and after rendering\n        *\n        * @event afterTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after update\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A flag that specifies whether the runner is running or not.\n         *\n         * @property enabled\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n         * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n         * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n         *\n         * @property isFixed\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that specifies the time step between updates in milliseconds.\n         * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n         * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n         *\n         * @property delta\n         * @type number\n         * @default 1000 / 60\n         */\n\n      })();\n      /***/\n\n    },\n    /* 28 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * This module has now been replaced by `Matter.Collision`.\n      *\n      * All usage should be migrated to `Matter.Collision`.\n      * For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n      *\n      * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n      *\n      * @class SAT\n      * @deprecated\n      */\n      var SAT = {};\n      module.exports = SAT;\n\n      var Collision = __webpack_require__(8);\n\n      var Common = __webpack_require__(0);\n\n      var deprecated = Common.deprecated;\n\n      (function () {\n        /**\n         * Detect collision between two bodies using the Separating Axis Theorem.\n         * @deprecated replaced by Collision.collides\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {collision} collision\n         */\n        SAT.collides = function (bodyA, bodyB) {\n          return Collision.collides(bodyA, bodyB);\n        };\n\n        deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n      })();\n      /***/\n\n    },\n    /* 29 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n      *\n      * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Svg\n      */\n      var Svg = {};\n      module.exports = Svg;\n\n      var Bounds = __webpack_require__(1);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Converts an SVG path into an array of vector points.\n         * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n         * See `Bodies.fromVertices` which provides support for this.\n         * Note that this function is not guaranteed to support complex paths (such as those with holes).\n         * You must load the `pathseg.js` polyfill on newer browsers.\n         * @method pathToVertices\n         * @param {SVGPathElement} path\n         * @param {Number} [sampleLength=15]\n         * @return {Vector[]} points\n         */\n        Svg.pathToVertices = function (path, sampleLength) {\n          if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n          } // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n\n\n          var i,\n              il,\n              total,\n              point,\n              segment,\n              segments,\n              segmentsQueue,\n              lastSegment,\n              lastPoint,\n              segmentIndex,\n              points = [],\n              lx,\n              ly,\n              length = 0,\n              x = 0,\n              y = 0;\n          sampleLength = sampleLength || 15;\n\n          var addPoint = function (px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1; // when the last point doesn't equal the current point add the current point\n\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n              if (lastPoint && isRelative) {\n                lx = lastPoint.x;\n                ly = lastPoint.y;\n              } else {\n                lx = 0;\n                ly = 0;\n              }\n\n              var point = {\n                x: lx + px,\n                y: ly + py\n              }; // set last point\n\n              if (isRelative || !lastPoint) {\n                lastPoint = point;\n              }\n\n              points.push(point);\n              x = lx + px;\n              y = ly + py;\n            }\n          };\n\n          var addSegmentPoint = function (segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase(); // skip path ends\n\n            if (segType === 'Z') return; // map segment to x and y\n\n            switch (segType) {\n              case 'M':\n              case 'L':\n              case 'T':\n              case 'C':\n              case 'S':\n              case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n\n              case 'H':\n                x = segment.x;\n                break;\n\n              case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n          }; // ensure path is absolute\n\n\n          Svg._svgPathToAbsolute(path); // get total length\n\n\n          total = path.getTotalLength(); // queue segments\n\n          segments = [];\n\n          for (i = 0; i < path.pathSegList.numberOfItems; i += 1) segments.push(path.pathSegList.getItem(i));\n\n          segmentsQueue = segments.concat(); // sample through path\n\n          while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex]; // new segment\n\n            if (segment != lastSegment) {\n              while (segmentsQueue.length && segmentsQueue[0] != segment) addSegmentPoint(segmentsQueue.shift());\n\n              lastSegment = segment;\n            } // add points in between when curving\n            // TODO: adaptive sampling\n\n\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n              case 'C':\n              case 'T':\n              case 'S':\n              case 'Q':\n              case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n            } // increment by sample value\n\n\n            length += sampleLength;\n          } // add remaining segments not passed by sampling\n\n\n          for (i = 0, il = segmentsQueue.length; i < il; ++i) addSegmentPoint(segmentsQueue[i]);\n\n          return points;\n        };\n\n        Svg._svgPathToAbsolute = function (path) {\n          // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n          // Copyright (c) Gavin Kistner\n          // http://phrogz.net/js/_ReuseLicense.txt\n          // Modifications: tidy formatting and naming\n          var x0,\n              y0,\n              x1,\n              y1,\n              x2,\n              y2,\n              segs = path.pathSegList,\n              x = 0,\n              y = 0,\n              len = segs.numberOfItems;\n\n          for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n              if ('x' in seg) x = seg.x;\n              if ('y' in seg) y = seg.y;\n            } else {\n              if ('x1' in seg) x1 = x + seg.x1;\n              if ('x2' in seg) x2 = x + seg.x2;\n              if ('y1' in seg) y1 = y + seg.y1;\n              if ('y2' in seg) y2 = y + seg.y2;\n              if ('x' in seg) x += seg.x;\n              if ('y' in seg) y += seg.y;\n\n              switch (segType) {\n                case 'm':\n                  segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                  break;\n\n                case 'l':\n                  segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                  break;\n\n                case 'h':\n                  segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                  break;\n\n                case 'v':\n                  segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                  break;\n\n                case 'c':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                  break;\n\n                case 's':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                  break;\n\n                case 'q':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                  break;\n\n                case 't':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                  break;\n\n                case 'a':\n                  segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                  break;\n\n                case 'z':\n                case 'Z':\n                  x = x0;\n                  y = y0;\n                  break;\n              }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n              x0 = x;\n              y0 = y;\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 30 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * This module has now been replaced by `Matter.Composite`.\n      *\n      * All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n      * For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n      *\n      * The property `world.gravity` has been moved to `engine.gravity`.\n      *\n      * For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n      * Eventually this alias module will be marked as deprecated and then later removed in a future release.\n      *\n      * @class World\n      */\n      var World = {};\n      module.exports = World;\n\n      var Composite = __webpack_require__(5);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * See above, aliases for back compatibility only\n         */\n        World.create = Composite.create;\n        World.add = Composite.add;\n        World.remove = Composite.remove;\n        World.clear = Composite.clear;\n        World.addComposite = Composite.addComposite;\n        World.addBody = Composite.addBody;\n        World.addConstraint = Composite.addConstraint;\n      })();\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});","map":{"version":3,"sources":["/home/brandon/Documents/Projects/portfolio/node_modules/matter-js/build/matter.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","Common","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","args","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","_chained","lastResult","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","global","e","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","pathPattern","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","verticesLength","translateX","translateY","pointX","pointY","dx","dy","nextVertex","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","alpha","acos","theta","clockwiseSort","sort","vertexA","vertexB","isConvex","flag","k","z","hull","upper","lower","pop","Events","on","eventNames","callback","names","events","off","callbacks","newCallbacks","trigger","event","eventClone","Composite","Body","options","id","type","parent","isModified","bodies","constraints","composites","label","plugin","cache","allBodies","allConstraints","allComposites","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","isStatic","move","rebase","translation","recursive","rotation","setPosition","Sleeping","Render","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","circleRadius","positionPrev","anglePrev","axes","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setAngle","setVelocity","setAngularVelocity","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","totalArea","totalInertia","deltaTime","correction","deltaTimeSquared","velocityPrevX","velocityPrevY","applyForce","offset","properties","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","Collision","Pair","_supports","_overlapAB","overlap","axis","_overlapBA","collided","parentA","parentB","depth","normal","tangent","penetration","supports","collides","_overlapAxes","table","minOverlap","minAxis","minAxisX","minAxisY","supportsB","_findSupports","supportCount","supportsA","verticesA","verticesB","verticesALength","verticesBLength","verticesAX","verticesAY","verticesBX","verticesBY","axesLength","overlapMin","Number","MAX_VALUE","overlapAxisNumber","overlapAB","overlapBA","axisX","axisY","minA","minB","maxA","maxB","_projectToAxis","projection","direction","bodyAPositionX","bodyAPositionY","normalX","normalY","nearestDistance","vertexC","distance","Contact","timestamp","contacts","activeContacts","separation","confirmedActive","timeCreated","timeUpdated","parentAVerticesLength","support","contactId","contact","setActive","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","share","normalVelocity","relativeVelocity","zero","postSolveAll","gradient","toFixed","xx","Bodies","rectangle","width","height","trapezoid","slope","roof","x1","x2","x3","verticesPath","circle","maxSides","sides","ceil","polygon","PI","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","isConcave","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunk","chunkVertices","coincident_max_dist","partA","partB","pav","pbv","da","db","Mouse","element","mouse","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","undefined","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","clientHeight","Detector","setBodies","detector","collisions","bodiesLength","canCollide","_compareBoundsX","boundXMax","boundYMax","boundYMin","bodyAStatic","partsALength","partsASingle","partsBLength","partsAStart","partsBStart","filterA","filterB","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","pattern","test","exec","major","minor","patch","isRange","operator","prerelease","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","controller","engine","canvas","frameRequestId","timing","historySize","deltaHistory","lastTime","lastTimestamp","lastElapsed","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","elapsedHistory","background","wireframeBackground","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","showBroadphase","setPixelRatio","appendChild","run","loop","time","_updateTiming","world","stats","stop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","setTransform","endViewTransform","startTime","currentBackground","_applyBackground","globalCompositeOperation","fillRect","enableSleeping","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","sections","font","textBaseline","textAlign","section","fillText","lastEngineDelta","lastDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineElapsedMean","timestampElapsedMean","rateMean","fps","graphHeight","gap","round","count","indicator","plotY","beginPath","moveTo","lineTo","stroke","start","arc","closePath","coils","fill","globalAlpha","texture","_getTexture","drawImage","rect","corrected","normalPosX","normalPosY","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","positionIterations","velocityIterations","constraintIterations","gravity","grid","buckets","broadphase","metrics","_bodiesApplyGravity","_bodiesUpdate","collisionStart","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","activeCount","pairsLength","contactShare","positionDampen","positionWarming","verticesTranslate","boundsUpdate","positionImpulseX","positionImpulseY","contactsLength","contactVertex","impulseX","impulseY","timeScaleSquared","restingThresh","frictionNormalMultiplier","restingThreshTangent","NumberMaxValue","maxFriction","bodyAVelocity","bodyBVelocity","tangentX","tangentY","inverseMassTotal","offsetAX","offsetAY","offsetBX","offsetBY","velocityPointAX","velocityPointAY","velocityPointBX","velocityPointBY","relativeVelocityX","relativeVelocityY","tangentVelocity","normalOverlap","normalForce","frictionLimit","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairsList","pairsListLength","pairsTable","collisionsLength","pairIndex","removePairIndex","Matter","Composites","Grid","MouseConstraint","Query","Runner","SAT","Svg","World","before","after","stack","columns","rows","columnGap","rowGap","lastBody","row","maxHeight","column","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","col","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","bucketWidth","bucketHeight","forceUpdate","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","gridPairs","pairId","bucketLength","pairKeys","pairKeysLength","mouseConstraint","_triggerEvents","mouseEvents","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","_frameTimeout","clearTimeout","deltaSampleSize","counterTimestamp","frameCounter","timePrev","timeScalePrev","isFixed","runner","deltaMin","deltaMax","tick","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag"],"mappings":"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;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA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AP,CAAckD,KAAd,CAAoBrC,UAApB,GAAiCgI,aAAjC;AACA1d,UAAAA,MAAM,CAAC6U,MAAP,CAAckD,KAAd,CAAoB4F,cAApB,GAAqC,SAArC;AACA3d,UAAAA,MAAM,CAAC+Y,iBAAP,GAA2BrD,UAA3B;AACH,SATD;AAWA;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEC,OAlxDD;AAqxDA;;AAAO,KAvjPG;AAwjPV;;AACA;AAAO,cAAShrB,MAAT,EAAiBD,OAAjB,EAA0B;AAEjC;AACA;AACA;AACA;AACA;AAEA,UAAIud,OAAO,GAAG,EAAd;AAEAtd,MAAAA,MAAM,CAACD,OAAP,GAAiBud,OAAjB;;AAEA,OAAC,YAAW;AAER;AACJ;AACA;AACA;AACA;AACA;AACIA,QAAAA,OAAO,CAAC1b,MAAR,GAAiB,UAAS2H,MAAT,EAAiB;AAC9B,iBAAO;AACHA,YAAAA,MAAM,EAAEA,MADL;AAEH2pB,YAAAA,aAAa,EAAE,CAFZ;AAGHC,YAAAA,cAAc,EAAE;AAHb,WAAP;AAKH,SAND;AAQH,OAhBD;AAmBA;;AAAO,KAxlPG;AAylPV;;AACA;AAAO,cAASnzB,MAAT,EAAiBD,OAAjB,EAA0BM,mBAA1B,EAA+C;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAI+yB,MAAM,GAAG,EAAb;AAEApzB,MAAAA,MAAM,CAACD,OAAP,GAAiBqzB,MAAjB;;AAEA,UAAI7f,QAAQ,GAAGlT,mBAAmB,CAAC,CAAD,CAAlC;;AACA,UAAIgzB,QAAQ,GAAGhzB,mBAAmB,CAAC,EAAD,CAAlC;;AACA,UAAIqlB,QAAQ,GAAGrlB,mBAAmB,CAAC,EAAD,CAAlC;;AACA,UAAIizB,KAAK,GAAGjzB,mBAAmB,CAAC,EAAD,CAA/B;;AACA,UAAIwP,MAAM,GAAGxP,mBAAmB,CAAC,CAAD,CAAhC;;AACA,UAAIoQ,SAAS,GAAGpQ,mBAAmB,CAAC,CAAD,CAAnC;;AACA,UAAI8d,UAAU,GAAG9d,mBAAmB,CAAC,EAAD,CAApC;;AACA,UAAImC,MAAM,GAAGnC,mBAAmB,CAAC,CAAD,CAAhC;;AACA,UAAIqQ,IAAI,GAAGrQ,mBAAmB,CAAC,CAAD,CAA9B;;AAEA,OAAC,YAAW;AAER;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI+yB,QAAAA,MAAM,CAACxxB,MAAP,GAAgB,UAAS+O,OAAT,EAAkB;AAC9BA,UAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,cAAImD,QAAQ,GAAG;AACXyf,YAAAA,kBAAkB,EAAE,CADT;AAEXC,YAAAA,kBAAkB,EAAE,CAFT;AAGXC,YAAAA,oBAAoB,EAAE,CAHX;AAIXhF,YAAAA,cAAc,EAAE,KAJL;AAKXve,YAAAA,MAAM,EAAE,EALG;AAMXkB,YAAAA,MAAM,EAAE,EANG;AAOXsiB,YAAAA,OAAO,EAAE;AACLxqB,cAAAA,CAAC,EAAE,CADE;AAELC,cAAAA,CAAC,EAAE,CAFE;AAGLuE,cAAAA,KAAK,EAAE;AAHF,aAPE;AAYX2c,YAAAA,MAAM,EAAE;AACJ9M,cAAAA,SAAS,EAAE,CADP;AAEJlI,cAAAA,SAAS,EAAE,CAFP;AAGJsa,cAAAA,SAAS,EAAE,CAHP;AAIJjF,cAAAA,WAAW,EAAE;AAJT;AAZG,WAAf;AAoBA,cAAIR,MAAM,GAAG1nB,MAAM,CAACO,MAAP,CAAc+Q,QAAd,EAAwBnD,OAAxB,CAAb;AAEAuZ,UAAAA,MAAM,CAAC8C,KAAP,GAAerc,OAAO,CAACqc,KAAR,IAAiBvc,SAAS,CAAC7O,MAAV,CAAiB;AAAEuP,YAAAA,KAAK,EAAE;AAAT,WAAjB,CAAhC;AACA+Y,UAAAA,MAAM,CAAC9Q,KAAP,GAAezI,OAAO,CAACyI,KAAR,IAAiBka,KAAK,CAAC1xB,MAAN,EAAhC;AACAsoB,UAAAA,MAAM,CAACtE,QAAP,GAAkBjV,OAAO,CAACiV,QAAR,IAAoBF,QAAQ,CAAC9jB,MAAT,EAAtC,CA3B8B,CA6B9B;;AACAsoB,UAAAA,MAAM,CAACyJ,IAAP,GAAc;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAd;AACA1J,UAAAA,MAAM,CAAC8C,KAAP,CAAa0G,OAAb,GAAuBxJ,MAAM,CAACwJ,OAA9B;AACAxJ,UAAAA,MAAM,CAAC2J,UAAP,GAAoB3J,MAAM,CAACyJ,IAA3B;AACAzJ,UAAAA,MAAM,CAAC4J,OAAP,GAAiB,EAAjB;AAEA,iBAAO5J,MAAP;AACH,SApCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIkJ,QAAAA,MAAM,CAAChqB,MAAP,GAAgB,UAAS8gB,MAAT,EAAiBrc,KAAjB,EAAwBwK,UAAxB,EAAoC;AAChD,cAAI+V,SAAS,GAAG5rB,MAAM,CAACoD,GAAP,EAAhB;AAEAiI,UAAAA,KAAK,GAAGA,KAAK,IAAI,OAAO,EAAxB;AACAwK,UAAAA,UAAU,GAAGA,UAAU,IAAI,CAA3B;AAEA,cAAI2U,KAAK,GAAG9C,MAAM,CAAC8C,KAAnB;AAAA,cACIpH,QAAQ,GAAGsE,MAAM,CAACtE,QADtB;AAAA,cAEIxM,KAAK,GAAG8Q,MAAM,CAAC9Q,KAFnB;AAAA,cAGIiR,MAAM,GAAGH,MAAM,CAACG,MAHpB;AAAA,cAII9M,SAAS,GAAG8M,MAAM,CAAC9M,SAJvB;AAAA,cAKIhd,CALJ,CANgD,CAahD;;AACA8pB,UAAAA,MAAM,CAAC9M,SAAP,IAAoB1P,KAAK,GAAGwc,MAAM,CAAChV,SAAnC;AACAgV,UAAAA,MAAM,CAACsF,SAAP,GAAmB9hB,KAAK,GAAGwc,MAAM,CAAChV,SAAlC,CAfgD,CAiBhD;;AACA,cAAI9E,KAAK,GAAG;AACRgN,YAAAA,SAAS,EAAE8M,MAAM,CAAC9M;AADV,WAAZ;AAIA1N,UAAAA,MAAM,CAACS,OAAP,CAAe4Z,MAAf,EAAuB,cAAvB,EAAuC3Z,KAAvC,EAtBgD,CAwBhD;;AACA,cAAIe,SAAS,GAAGb,SAAS,CAACa,SAAV,CAAoB0b,KAApB,CAAhB;AAAA,cACIzb,cAAc,GAAGd,SAAS,CAACc,cAAV,CAAyByb,KAAzB,CADrB,CAzBgD,CA4BhD;;AACA,cAAIA,KAAK,CAACjc,UAAV,EAAsB;AAClB2U,YAAAA,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAA6BtU,SAA7B;AACH,WA/B+C,CAiChD;;;AACA,cAAI0b,KAAK,CAACjc,UAAV,EAAsB;AAClBN,YAAAA,SAAS,CAACgB,WAAV,CAAsBub,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,IAA3C;AACH,WApC+C,CAsChD;;;AACA,cAAI9C,MAAM,CAACuE,cAAX,EACIlb,QAAQ,CAACnK,MAAT,CAAgBkI,SAAhB,EAA2B+Y,MAAM,CAAChV,SAAlC,EAxC4C,CA0ChD;;AACA+d,UAAAA,MAAM,CAACW,mBAAP,CAA2BziB,SAA3B,EAAsC4Y,MAAM,CAACwJ,OAA7C,EA3CgD,CA6ChD;;;AACAN,UAAAA,MAAM,CAACY,aAAP,CAAqB1iB,SAArB,EAAgCzD,KAAhC,EAAuCwc,MAAM,CAAChV,SAA9C,EAAyDgD,UAAzD,EAAqE2U,KAAK,CAAC/jB,MAA3E,EA9CgD,CAgDhD;;;AACAkV,UAAAA,UAAU,CAACc,WAAX,CAAuB3N,SAAvB;;AACA,eAAK/Q,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2pB,MAAM,CAACuJ,oBAAvB,EAA6ClzB,CAAC,EAA9C,EAAkD;AAC9C4d,YAAAA,UAAU,CAACgB,QAAX,CAAoB5N,cAApB,EAAoC8Y,MAAM,CAAChV,SAA3C;AACH;;AACD8I,UAAAA,UAAU,CAAC+B,YAAX,CAAwB5O,SAAxB,EArDgD,CAuDhD;;AACAsU,UAAAA,QAAQ,CAACxM,KAAT,GAAiB8Q,MAAM,CAAC9Q,KAAxB;AACA,cAAIyM,UAAU,GAAGH,QAAQ,CAACG,UAAT,CAAoBD,QAApB,CAAjB,CAzDgD,CA2DhD;;AACA0N,UAAAA,KAAK,CAAClqB,MAAN,CAAagQ,KAAb,EAAoByM,UAApB,EAAgCtI,SAAhC,EA5DgD,CA8DhD;;AACA,cAAI2M,MAAM,CAACuE,cAAX,EACIlb,QAAQ,CAAC4F,eAAT,CAAyBC,KAAK,CAAC3R,IAA/B,EAAqC4iB,MAAM,CAAChV,SAA5C,EAhE4C,CAkEhD;;AACA,cAAI+D,KAAK,CAAC6a,cAAN,CAAqB3wB,MAArB,GAA8B,CAAlC,EACIuM,MAAM,CAACS,OAAP,CAAe4Z,MAAf,EAAuB,gBAAvB,EAAyC;AAAE9Q,YAAAA,KAAK,EAAEA,KAAK,CAAC6a;AAAf,WAAzC,EApE4C,CAsEhD;;AACAZ,UAAAA,QAAQ,CAACa,gBAAT,CAA0B9a,KAAK,CAAC3R,IAAhC;;AACA,eAAKlH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2pB,MAAM,CAACqJ,kBAAvB,EAA2ChzB,CAAC,EAA5C,EAAgD;AAC5C8yB,YAAAA,QAAQ,CAACc,aAAT,CAAuB/a,KAAK,CAAC3R,IAA7B,EAAmC4iB,MAAM,CAAChV,SAA1C;AACH;;AACDge,UAAAA,QAAQ,CAACe,iBAAT,CAA2B9iB,SAA3B,EA3EgD,CA6EhD;;AACA6M,UAAAA,UAAU,CAACc,WAAX,CAAuB3N,SAAvB;;AACA,eAAK/Q,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2pB,MAAM,CAACuJ,oBAAvB,EAA6ClzB,CAAC,EAA9C,EAAkD;AAC9C4d,YAAAA,UAAU,CAACgB,QAAX,CAAoB5N,cAApB,EAAoC8Y,MAAM,CAAChV,SAA3C;AACH;;AACD8I,UAAAA,UAAU,CAAC+B,YAAX,CAAwB5O,SAAxB,EAlFgD,CAoFhD;;AACA+hB,UAAAA,QAAQ,CAACgB,gBAAT,CAA0Bjb,KAAK,CAAC3R,IAAhC;;AACA,eAAKlH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2pB,MAAM,CAACsJ,kBAAvB,EAA2CjzB,CAAC,EAA5C,EAAgD;AAC5C8yB,YAAAA,QAAQ,CAACiB,aAAT,CAAuBlb,KAAK,CAAC3R,IAA7B,EAAmC4iB,MAAM,CAAChV,SAA1C;AACH,WAxF+C,CA0FhD;;;AACA,cAAI+D,KAAK,CAACmb,eAAN,CAAsBjxB,MAAtB,GAA+B,CAAnC,EACIuM,MAAM,CAACS,OAAP,CAAe4Z,MAAf,EAAuB,iBAAvB,EAA0C;AAAE9Q,YAAAA,KAAK,EAAEA,KAAK,CAACmb;AAAf,WAA1C;AAEJ,cAAInb,KAAK,CAACob,YAAN,CAAmBlxB,MAAnB,GAA4B,CAAhC,EACIuM,MAAM,CAACS,OAAP,CAAe4Z,MAAf,EAAuB,cAAvB,EAAuC;AAAE9Q,YAAAA,KAAK,EAAEA,KAAK,CAACob;AAAf,WAAvC,EA/F4C,CAiGhD;;AACApB,UAAAA,MAAM,CAACqB,kBAAP,CAA0BnjB,SAA1B;;AAEAzB,UAAAA,MAAM,CAACS,OAAP,CAAe4Z,MAAf,EAAuB,aAAvB,EAAsC3Z,KAAtC,EApGgD,CAsGhD;;AACA2Z,UAAAA,MAAM,CAACG,MAAP,CAAcK,WAAd,GAA4BloB,MAAM,CAACoD,GAAP,KAAewoB,SAA3C;AAEA,iBAAOlE,MAAP;AACH,SA1GD;AA4GA;AACJ;AACA;AACA;AACA;AACA;;;AACIkJ,QAAAA,MAAM,CAACsB,KAAP,GAAe,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACtCpyB,UAAAA,MAAM,CAACO,MAAP,CAAc4xB,OAAd,EAAuBC,OAAvB;;AAEA,cAAIA,OAAO,CAAC5H,KAAZ,EAAmB;AACf2H,YAAAA,OAAO,CAAC3H,KAAR,GAAgB4H,OAAO,CAAC5H,KAAxB;AAEAoG,YAAAA,MAAM,CAACvgB,KAAP,CAAa8hB,OAAb;AAEA,gBAAI3jB,MAAM,GAAGP,SAAS,CAACa,SAAV,CAAoBqjB,OAAO,CAAC3H,KAA5B,CAAb;;AAEA,iBAAK,IAAIzsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyQ,MAAM,CAAC1N,MAA3B,EAAmC/C,CAAC,EAApC,EAAwC;AACpC,kBAAIyL,IAAI,GAAGgF,MAAM,CAACzQ,CAAD,CAAjB;AACAgT,cAAAA,QAAQ,CAACpP,GAAT,CAAa6H,IAAb,EAAmB,KAAnB;AACAA,cAAAA,IAAI,CAAC4E,EAAL,GAAUpO,MAAM,CAAC4E,MAAP,EAAV;AACH;AACJ;AACJ,SAhBD;AAkBA;AACJ;AACA;AACA;AACA;;;AACIgsB,QAAAA,MAAM,CAACvgB,KAAP,GAAe,UAASqX,MAAT,EAAiB;AAC5BoJ,UAAAA,KAAK,CAACzgB,KAAN,CAAYqX,MAAM,CAAC9Q,KAAnB;AACAsM,UAAAA,QAAQ,CAAC7S,KAAT,CAAeqX,MAAM,CAACtE,QAAtB;AACH,SAHD;AAKA;AACJ;AACA;AACA;AACA;AACA;;;AACIwN,QAAAA,MAAM,CAACqB,kBAAP,GAA4B,UAASzjB,MAAT,EAAiB;AACzC,eAAK,IAAIzQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyQ,MAAM,CAAC1N,MAA3B,EAAmC/C,CAAC,EAApC,EAAwC;AACpC,gBAAIyL,IAAI,GAAGgF,MAAM,CAACzQ,CAAD,CAAjB,CADoC,CAGpC;;AACAyL,YAAAA,IAAI,CAAC+H,KAAL,CAAW7K,CAAX,GAAe,CAAf;AACA8C,YAAAA,IAAI,CAAC+H,KAAL,CAAW5K,CAAX,GAAe,CAAf;AACA6C,YAAAA,IAAI,CAACgI,MAAL,GAAc,CAAd;AACH;AACJ,SATD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIof,QAAAA,MAAM,CAACW,mBAAP,GAA6B,UAAS/iB,MAAT,EAAiB0iB,OAAjB,EAA0B;AACnD,cAAImB,YAAY,GAAG,OAAOnB,OAAO,CAAChmB,KAAf,KAAyB,WAAzB,GAAuCgmB,OAAO,CAAChmB,KAA/C,GAAuD,KAA1E;;AAEA,cAAKgmB,OAAO,CAACxqB,CAAR,KAAc,CAAd,IAAmBwqB,OAAO,CAACvqB,CAAR,KAAc,CAAlC,IAAwC0rB,YAAY,KAAK,CAA7D,EAAgE;AAC5D;AACH;;AAED,eAAK,IAAIt0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyQ,MAAM,CAAC1N,MAA3B,EAAmC/C,CAAC,EAApC,EAAwC;AACpC,gBAAIyL,IAAI,GAAGgF,MAAM,CAACzQ,CAAD,CAAjB;AAEA,gBAAIyL,IAAI,CAACgH,QAAL,IAAiBhH,IAAI,CAACwI,UAA1B,EACI,SAJgC,CAMpC;;AACAxI,YAAAA,IAAI,CAAC+H,KAAL,CAAW5K,CAAX,IAAgB6C,IAAI,CAACc,IAAL,GAAY4mB,OAAO,CAACvqB,CAApB,GAAwB0rB,YAAxC;AACA7oB,YAAAA,IAAI,CAAC+H,KAAL,CAAW7K,CAAX,IAAgB8C,IAAI,CAACc,IAAL,GAAY4mB,OAAO,CAACxqB,CAApB,GAAwB2rB,YAAxC;AACH;AACJ,SAjBD;AAmBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzB,QAAAA,MAAM,CAACY,aAAP,GAAuB,UAAShjB,MAAT,EAAiBoH,SAAjB,EAA4B/C,SAA5B,EAAuCgD,UAAvC,EAAmDyc,WAAnD,EAAgE;AACnF,eAAK,IAAIv0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyQ,MAAM,CAAC1N,MAA3B,EAAmC/C,CAAC,EAApC,EAAwC;AACpC,gBAAIyL,IAAI,GAAGgF,MAAM,CAACzQ,CAAD,CAAjB;AAEA,gBAAIyL,IAAI,CAACgH,QAAL,IAAiBhH,IAAI,CAACwI,UAA1B,EACI;AAEJ9D,YAAAA,IAAI,CAACtH,MAAL,CAAY4C,IAAZ,EAAkBoM,SAAlB,EAA6B/C,SAA7B,EAAwCgD,UAAxC;AACH;AACJ,SATD;AAWA;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;A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","sourcesContent":["/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 21);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: []\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            supports = collision.supports,\n            minAxis = minOverlap.axis,\n            minAxisX = minAxis.x,\n            minAxisY = minAxis.y;\n\n        // ensure normal is facing away from bodyA\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n        } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n        }\n        \n        collision.tangent.x = -normal.y;\n        collision.tangent.y = normal.x;\n\n        collision.depth = minOverlap.overlap;\n\n        collision.penetration.x = normal.x * collision.depth;\n        collision.penetration.y = normal.y * collision.depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update supports array size\n        supports.length = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    Collision._projectToAxis = function(projection, vertices, axis) {\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            nearestDistance = Number.MAX_VALUE,\n            vertexA,\n            vertexB,\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB,\n            parentAVerticesLength = parentA.vertices.length;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        collision.pair = pair;\n        activeContacts.length = 0;\n        \n        for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n                activeContacts.push(contact);\n            } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var collisions = [],\n            pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions.push(collision);\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(13);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(14);\nvar Pairs = __webpack_require__(20);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // update the detector bodies if they have changed\n        if (world.isModified) {\n            Detector.setBodies(detector, allBodies);\n        }\n\n        // reset all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        detector.pairs = engine.pairs;\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen,\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            restingThresh = Resolver._restingThresh * timeScaleSquared,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier,\n            restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared,\n            NumberMaxValue = Number.MAX_VALUE,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared;\n\n            // update body velocities\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n                \n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                    maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = NumberMaxValue;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsTable = pairs.table,\n            collisionsLength = collisions.length,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairIndex,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive.push(pair);\n                } else {\n                    // pair exists but was inactive, so a collision has just started again\n                    collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n            } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n            }\n        }\n\n        // find pairs that are no longer active\n        var removePairIndex = [];\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            if (!pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                    removePairIndex.push(i);\n                }\n            }\n        }\n\n        // remove inactive pairs\n        for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(22);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(23);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(14);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(24);\r\nMatter.Mouse = __webpack_require__(13);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.18.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(13);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(14);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});"]},"metadata":{},"sourceType":"script"}